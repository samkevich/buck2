"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2804],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>m,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>s,withMDXComponents:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},i.apply(this,arguments)}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),u=function(e){return function(t){var a=s(t.components);return n.createElement(e,i({},t,{components:a}))}},s=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(m.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),u=s(a),p=r,c=u["".concat(l,".").concat(p)]||u[p]||h[p]||i;return a?n.createElement(c,o(o({ref:t},m),{},{components:a})):n.createElement(c,o({ref:t},m))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=b;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}b.displayName="MDXCreateElement"},25298:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={},l="Build Target",o={unversionedId:"legacy/concepts/build-target",id:"legacy/concepts/build-target",title:"Build Target",description:"A build target is a string that identifies a build rule in your project. Build",source:"@site/../docs/legacy/concepts/build-target.md",sourceDirName:"legacy/concepts",slug:"/legacy/concepts/build-target",permalink:"/docs/legacy/concepts/build-target",draft:!1,tags:[],version:"current",frontMatter:{}},d={},m=[{value:"Fully-qualified build targets",id:"fully-qualified-build-targets",level:4},{value:"Relative build targets",id:"relative-build-targets",level:4},{value:"Command-line Pro Tips",id:"command-line-pro-tips",level:2},{value:"See also",id:"see-also",level:2}],u={toc:m};function s(e){let{components:t,...a}=e;return(0,r.mdx)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"build-target"},"Build Target"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"build target")," is a string that identifies a build rule in your project. Build\ntargets are used as arguments to Buck commands, such as\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/build.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck build"))," and\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/run.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck run")),". Build targets are also used\nas arguments to ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_rule.html"},"build rules")," to\nenable one build rule to reference another. For example, a build rule might use\na build target to reference another rule in order to specify that rule as a\n",(0,r.mdx)("em",{parentName:"p"},"dependency"),"."),(0,r.mdx)("h4",{id:"fully-qualified-build-targets"},"Fully-qualified build targets"),(0,r.mdx)("p",null,"Here is an example of a ",(0,r.mdx)("em",{parentName:"p"},"fully-qualified")," build target:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"//java/com/facebook/share:ui\n")),(0,r.mdx)("p",null,"A fully-qualified build target has three components:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"//")," prefix indicates that the subsequent path is from the ",(0,r.mdx)("em",{parentName:"li"},"root")," of your\nproject. You can use the ",(0,r.mdx)("a",{parentName:"li",href:"https://buck.build/command/root.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck root")),"\ncommand to identify the root of your project."),(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"java/com/facebook/share")," between the ",(0,r.mdx)("inlineCode",{parentName:"li"},"//")," prefix and the colon (",(0,r.mdx)("inlineCode",{parentName:"li"},":"),")\nindicates that the ",(0,r.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_file.html"},"build file"),"\n(usually named ",(0,r.mdx)("inlineCode",{parentName:"li"},"BUCK"),") is located in the directory ",(0,r.mdx)("inlineCode",{parentName:"li"},"java/com/facebook/share"),"."),(0,r.mdx)("li",{parentName:"ol"},"The ",(0,r.mdx)("inlineCode",{parentName:"li"},"ui")," after the colon (",(0,r.mdx)("inlineCode",{parentName:"li"},":"),") indicates the name of the build rule within\nthe build file. Build rule names must be unique within a build file. By\n",(0,r.mdx)("em",{parentName:"li"},"name")," we mean, more formally, the value of the ",(0,r.mdx)("inlineCode",{parentName:"li"},"name")," argument to the build\nrule.")),(0,r.mdx)("p",null,"Note that the name of the build file itself\u2014usually BUCK\u2014does ",(0,r.mdx)("em",{parentName:"p"},"not")," occur in the\nbuild target. All build files within a given Buck project must have the same\nname\u2014defined in the\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#buildfile.name"},(0,r.mdx)("inlineCode",{parentName:"a"},"[buildfile].name")),"\nentry of ",(0,r.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". Therefore, it is unnecessary to include the name in the\ntarget. The full regular expression for a fully-qualified build target is as\nfollows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"[A-Za-z0-9._-]*//[A-Za-z0-9/._-]*:[A-Za-z0-9_/.=,@~+-]+\n|- cell name -|  | package path | |--- rule name ----|\n")),(0,r.mdx)("p",null,"In Buck, a ",(0,r.mdx)("em",{parentName:"p"},"cell")," defines a directory tree of one or more Buck packages. For\nmore information about Buck cells and their relationship to packages and\nprojects, see the ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/about/overview.html"},"Key Concepts")," topic.\n",(0,r.mdx)("strong",{parentName:"p"},"NOTE:")," All target paths are assumed to start from the root of the Buck\nproject. Buck does not support specifying a target path that starts from a\ndirectory below the root. Although the double forward slash (",(0,r.mdx)("inlineCode",{parentName:"p"},"//"),") that prefixes\ntarget paths can be omitted when specifying a target from the command line (see\n",(0,r.mdx)("strong",{parentName:"p"},"Pro Tips")," below), Buck still assumes that the path is from the root. Buck\ndoes support ",(0,r.mdx)("em",{parentName:"p"},"relative")," build paths, but in Buck, that concept refers to\nspecifying build targets ",(0,r.mdx)("em",{parentName:"p"},"from within")," a build file. See ",(0,r.mdx)("strong",{parentName:"p"},"Relative build\ntargets")," below for more details."),(0,r.mdx)("h4",{id:"relative-build-targets"},"Relative build targets"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"relative")," build target can be used to reference a\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_rule.html"},"build rule")," ",(0,r.mdx)("em",{parentName:"p"},"within the same\n"),(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_file.html"},(0,r.mdx)("em",{parentName:"a"},"build file")),". A relative build\ntarget starts with a colon (",(0,r.mdx)("inlineCode",{parentName:"p"},":"),") and is followed by only the third component (or\n",(0,r.mdx)("em",{parentName:"p"},"short name"),") of the fully-qualified build target. The following snippet from a\nbuild file shows an example of using a relative path."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"## Assume this rule is in //java/com/facebook/share/BUCK#\njava_binary(\n  name = 'ui_jar',\n  deps = [## The following target path##   //java/com/facebook/share:ui## is the same as using the following relative path.#':ui',],)\n")),(0,r.mdx)("h2",{id:"command-line-pro-tips"},"Command-line Pro Tips"),(0,r.mdx)("p",null,"Here are some ways that you can reduce your typing when you specify build\ntargets as command-line arguments to the\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/build.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck build"))," or\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/run.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck run"))," commands. Consider the\nfollowing example of a fully-qualified build target used with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck build"),"\ncommand:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck build //java/com/facebook/share:share\n")),(0,r.mdx)("p",null,"Although Buck is always strict when parsing build targets in build files, Buck\nis flexible when parsing build targets on the command-line. Specifically, the\nleading ",(0,r.mdx)("inlineCode",{parentName:"p"},"//")," is optional on the command line, so the above could be:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck build java/com/facebook/share:share\n")),(0,r.mdx)("p",null,"Also, if there is a forward slash before the colon, it is ignored, so this could\nalso be written as:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck build java/com/facebook/share/:share\n")),(0,r.mdx)("p",null,"which enables you to produce the red text shown below using tab-completion,\nwhich dramatically reduces how much you need to type:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck build java/com/facebook/share/:share\n")),(0,r.mdx)("p",null,"Finally, if the final path element matches the value specified after the colon,\nit can be omitted:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"# This is treated as //java/com/facebook/share:share.\nbuck build java/com/facebook/share/\n")),(0,r.mdx)("p",null,"which makes the build target even easier to tab-complete. For this reason, the\nname of the build rule for the primary deliverable in a build file is often\nnamed the same as the parent directory. That way, it can be built from the\ncommand-line with less typing."),(0,r.mdx)("h2",{id:"see-also"},"See also"),(0,r.mdx)("p",null,"Buck supports the ability to define ",(0,r.mdx)("strong",{parentName:"p"},(0,r.mdx)("em",{parentName:"strong"},"aliases")," for build targets"),"; using\naliases can improve brevity when specifying targets on the Buck command line.\nFor more information, see the\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#alias"},(0,r.mdx)("inlineCode",{parentName:"a"},"[alias]"))," section in\nthe documentation for\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html"},(0,r.mdx)("inlineCode",{parentName:"a"},".buckconfig")),". A\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target_pattern.html"},(0,r.mdx)("strong",{parentName:"a"},"build target pattern")),"\nis a string that describes a set of one or more build targets. For example, the\npattern ",(0,r.mdx)("inlineCode",{parentName:"p"},"//...")," is used to build an entire project. For more information, see\nthe ",(0,r.mdx)("strong",{parentName:"p"},"Build Target Pattern")," topic."))}s.isMDXComponent=!0}}]);