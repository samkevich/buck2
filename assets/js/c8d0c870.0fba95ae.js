"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9901],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>d});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},a.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),d=function(e){return function(n){var t=c(n.components);return i.createElement(e,a({},n,{components:t}))}},c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},y=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,u=d["".concat(o,".").concat(m)]||d[m]||b[m]||a;return t?i.createElement(u,l(l({ref:n},p),{},{components:t})):i.createElement(u,l({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}y.displayName="MDXCreateElement"},86865:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=t(87462),r=(t(67294),t(3905));const a={},o="Visibility",l={unversionedId:"legacy/concepts/visibility",id:"legacy/concepts/visibility",title:"Visibility",description:"Visibility determines whether a build rule can include a build target in its",source:"@site/../docs/legacy/concepts/visibility.md",sourceDirName:"legacy/concepts",slug:"/legacy/concepts/visibility",permalink:"/docs/legacy/concepts/visibility",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Examples",id:"examples",level:2}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"visibility"},"Visibility"),(0,r.mdx)("p",null,"Visibility determines whether a build rule can include a build target in its\nlist of ",(0,r.mdx)("inlineCode",{parentName:"p"},"deps"),'. In a large project, you may want to prevent developers from\n"reaching across" the project and pulling in additional code. Reducing the\nvisibility of build rules can help prevent that type of behavior. There are two\ntypes of visibility attributes available, each of which takes a list of\n',(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target_pattern.html"},"build target patterns"),":\n",(0,r.mdx)("inlineCode",{parentName:"p"},"visibility"),", which determines what other targets can depend on a target, and\n",(0,r.mdx)("inlineCode",{parentName:"p"},"within_view"),", which determines what other targets a target can depend on. Both\nattributes act as allowlists, with some exceptions. In general, if a target is\nnot listed, there may be no dependency relationship. If the ",(0,r.mdx)("inlineCode",{parentName:"p"},"within_view")," list\nis empty or unset, however, its check is bypassed. Similarly, targets defined in\nthe same build file always act as if they were members of their siblings'\n",(0,r.mdx)("inlineCode",{parentName:"p"},"visibility")," lists. There is also a special value, ",(0,r.mdx)("inlineCode",{parentName:"p"},"'PUBLIC'"),", which makes a\nbuild rule visible to all other rules. ",(0,r.mdx)("inlineCode",{parentName:"p"},"'PUBLIC'")," is valid in ",(0,r.mdx)("inlineCode",{parentName:"p"},"visibility")," but\nnot ",(0,r.mdx)("inlineCode",{parentName:"p"},"within_view"),". In case of logically-conflicting lists, ",(0,r.mdx)("inlineCode",{parentName:"p"},"within_view")," takes\nprecedence over ",(0,r.mdx)("inlineCode",{parentName:"p"},"visibility"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"//foo:bar")," defines ",(0,r.mdx)("inlineCode",{parentName:"p"},"//hello:world")," in its\n",(0,r.mdx)("inlineCode",{parentName:"p"},"visibility")," list, but ",(0,r.mdx)("inlineCode",{parentName:"p"},"//hello:world")," does not define ",(0,r.mdx)("inlineCode",{parentName:"p"},"//foo:bar")," in its\n",(0,r.mdx)("inlineCode",{parentName:"p"},"within_view")," list, then ",(0,r.mdx)("inlineCode",{parentName:"p"},"//hello:world")," may not depend on ",(0,r.mdx)("inlineCode",{parentName:"p"},"//foo:bar"),"."),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("p",null,"A common library like Guava should be able to be included by any build rule:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"prebuilt_jar(\n  name = 'guava',\n  binary_jar = 'guava-14.0.1.jar',\n  visibility = ['PUBLIC',],)\n")),(0,r.mdx)("p",null,"It is common to restrict the visibility of Android resources to the Java code\nthat uses it:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"android_resource(\n  name = 'ui_res',\n  res = 'res',\n  package = 'com.example',\n  visibility = ['//java/com/example/ui:ui',],)\n")),(0,r.mdx)("p",null,"Or it may be simpler to make it visible to the entire directory in case\nadditional build rules are added to ",(0,r.mdx)("inlineCode",{parentName:"p"},"java/com/example/ui/BUCK"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"android_resource(\n  name = 'ui_res',\n  res = 'res',\n  package = 'com.example',\n  visibility = ['//java/com/example/ui:',],)\n")),(0,r.mdx)("p",null,"Also, it is common to limit code for testing to be visible only to tests. If you\ndefine all of your Java unit tests in a folder named ",(0,r.mdx)("inlineCode",{parentName:"p"},"javatests/")," in the root of\nyour project, then you could define the following rule to ensure that only allow\nbuild rules under ",(0,r.mdx)("inlineCode",{parentName:"p"},"javatests/")," can depend on JUnit:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"prebuilt_jar(\n  name = 'junit',\n  binary_jar = 'junit-4.11.jar',\n  visibility = ['//javatests/...',],)\n")),(0,r.mdx)("p",null,"Finally, restricting the view of a target can be useful for preventing\ndependency creep:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"java_library(\n  name = 'example',\n  visibility = ['PUBLIC',],\n  within_view = ['//foo:bar','//hello:world',],)\n")))}c.isMDXComponent=!0}}]);