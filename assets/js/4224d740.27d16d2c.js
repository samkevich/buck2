"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8085],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>c,mdx:()=>_,useMDXComponents:()=>p,withMDXComponents:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),m=function(e){return function(n){var t=p(n.components);return a.createElement(e,l({},n,{components:t}))}},p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},x=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(t),c=i,u=m["".concat(r,".").concat(c)]||m[c]||h[c]||l;return t?a.createElement(u,d(d({ref:n},s),{},{components:t})):a.createElement(u,d({ref:n},s))}));function _(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=x;var d={};for(var o in n)hasOwnProperty.call(n,o)&&(d[o]=n[o]);d.originalType=e,d[u]="string"==typeof e?e:i,r[1]=d;for(var s=2;s<l;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}x.displayName="MDXCreateElement"},5511:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>s});var a=t(87462),i=(t(67294),t(3905));const l={},r=".buckconfig",d={unversionedId:"legacy/files-and-directories/dot-buckconfig",id:"legacy/files-and-directories/dot-buckconfig",title:".buckconfig",description:"The root of your project must contain",source:"@site/../docs/legacy/files-and-directories/dot-buckconfig.md",sourceDirName:"legacy/files-and-directories",slug:"/legacy/files-and-directories/dot-buckconfig",permalink:"/docs/legacy/files-and-directories/dot-buckconfig",draft:!1,tags:[],version:"current",frontMatter:{}},o={},s=[{value:"Performance impact of Buck configuration changes",id:"performance-impact-of-buck-configuration-changes",level:2},{value:"The .buckconfig file uses the INI file format",id:"the-buckconfig-file-uses-the-ini-file-format",level:2},{value:"Other INI file parsers",id:"other-ini-file-parsers",level:3},{value:"Dot character not supported in section names",id:"dot-character-not-supported-in-section-names",level:3},{value:"Character encoding",id:"character-encoding",level:2},{value:"Key values as lists",id:"key-values-as-lists",level:2},{value:"Transclusion of values from one key to another",id:"transclusion-of-values-from-one-key-to-another",level:2},{value:"Comments",id:"comments",level:2},{value:".buckconfig.local",id:"buckconfiglocal",level:2},{value:"Other initialization files",id:"other-initialization-files",level:2},{value:"Command-line control of configuration",id:"command-line-control-of-configuration",level:2},{value:"Precedence of Buck configuration specifications",id:"precedence-of-buck-configuration-specifications",level:2},{value:"Configuration files can include other files",id:"configuration-files-can-include-other-files",level:2},{value:"Sections",id:"sections",level:2},{value:"adb",id:"adb",level:2},{value:"adb_restart_on_failure",id:"adb_restart_on_failure",level:3},{value:"multi_install_mode",id:"multi_install_mode",level:3},{value:"staged_install_mode",id:"staged_install_mode",level:3},{value:"alias",id:"alias",level:2},{value:"android",id:"android",level:2},{value:"build_tools_version",id:"build_tools_version",level:3},{value:"compile_sdk_version",id:"compile_sdk_version",level:3},{value:"sdk_path",id:"sdk_path",level:3},{value:"apple",id:"apple",level:2},{value:"asset_catalog_validation",id:"asset_catalog_validation",level:3},{value:"codesign",id:"codesign",level:3},{value:"codesign_timeout",id:"codesign_timeout",level:3},{value:"code_sign_identities_command",id:"code_sign_identities_command",level:3},{value:"default_debug_info_format_for_binaries",id:"default_debug_info_format_for_binaries",level:3},{value:"default_debug_info_format_for_libraries",id:"default_debug_info_format_for_libraries",level:3},{value:"default_debug_info_format_for_tests",id:"default_debug_info_format_for_tests",level:3},{value:"device_helper_path",id:"device_helper_path",level:3},{value:"ipa_compression_level",id:"ipa_compression_level",level:3},{value:"provisioning_profile_read_command",id:"provisioning_profile_read_command",level:3},{value:"provisioning_profile_search_path",id:"provisioning_profile_search_path",level:3},{value:"target_sdk_version",id:"target_sdk_version",level:3},{value:"test_log",id:"test_log",level:3},{value:"use_flavored_cxx_sections",id:"use_flavored_cxx_sections",level:3},{value:"use_header_maps_in_xcode",id:"use_header_maps_in_xcode",level:3},{value:"xcode_developer_dir",id:"xcode_developer_dir",level:3},{value:"xcode_developer_dir_for_tests",id:"xcode_developer_dir_for_tests",level:3},{value:"xctool_default_destination_specifier",id:"xctool_default_destination_specifier",level:3},{value:"xctool_path",id:"xctool_path",level:3},{value:"xctool_zip_target",id:"xctool_zip_target",level:3},{value:"*_package_command",id:"_package_command",level:3},{value:"*_package_extension",id:"_package_extension",level:3},{value:"*_replacement",id:"_replacement",level:3},{value:"*_toolchains_override",id:"_toolchains_override",level:3},{value:"*_version_override",id:"_version_override",level:3},{value:"*_xcode_tool_name_override",id:"_xcode_tool_name_override",level:3},{value:"build",id:"build",level:2},{value:"artifact_cache_size_limit",id:"artifact_cache_size_limit",level:3},{value:"delete_temporaries",id:"delete_temporaries",level:3},{value:"depfiles",id:"depfiles",level:3},{value:"engine",id:"engine",level:3},{value:"max_depfile_cache_entries",id:"max_depfile_cache_entries",level:3},{value:"network_threads",id:"network_threads",level:3},{value:"rule_key_caching",id:"rule_key_caching",level:3},{value:"threads",id:"threads",level:3},{value:"thread_core_ratio",id:"thread_core_ratio",level:3},{value:"thread_core_ratio_max_threads",id:"thread_core_ratio_max_threads",level:3},{value:"thread_core_ratio_min_threads",id:"thread_core_ratio_min_threads",level:3},{value:"thread_core_ratio_reserved_cores",id:"thread_core_ratio_reserved_cores",level:3},{value:"type",id:"type",level:3},{value:"buildfile",id:"buildfile",level:2},{value:"includes",id:"includes",level:3},{value:"name",id:"name",level:3},{value:"cache",id:"cache",level:2},{value:"mode",id:"mode",level:3},{value:"dir",id:"dir",level:3},{value:"dir_cache_names",id:"dir_cache_names",level:3},{value:"dir_max_size",id:"dir_max_size",level:3},{value:"dir_mode",id:"dir_mode",level:3},{value:"serve_local_cache",id:"serve_local_cache",level:3},{value:"served_local_cache_mode",id:"served_local_cache_mode",level:3},{value:"http_url",id:"http_url",level:3},{value:"http_mode",id:"http_mode",level:3},{value:"http_read_headers",id:"http_read_headers",level:3},{value:"http_write_headers",id:"http_write_headers",level:3},{value:"http_timeout_seconds",id:"http_timeout_seconds",level:3},{value:"http_connect_timeout_seconds",id:"http_connect_timeout_seconds",level:3},{value:"http_read_timeout_seconds",id:"http_read_timeout_seconds",level:3},{value:"http_write_timeout_seconds",id:"http_write_timeout_seconds",level:3},{value:"http_max_concurrent_writes",id:"http_max_concurrent_writes",level:3},{value:"http_writer_shutdown_timeout_seconds",id:"http_writer_shutdown_timeout_seconds",level:3},{value:"http_error_message_format",id:"http_error_message_format",level:3},{value:"http_error_message_limit",id:"http_error_message_limit",level:3},{value:"http_max_store_attempts",id:"http_max_store_attempts",level:3},{value:"http_store_retry_interval_millis",id:"http_store_retry_interval_millis",level:3},{value:"http_max_store_size",id:"http_max_store_size",level:3},{value:"http_client_tls_cert",id:"http_client_tls_cert",level:3},{value:"http_client_tls_key",id:"http_client_tls_key",level:3},{value:"hybrid_thrift_endpoint",id:"hybrid_thrift_endpoint",level:3},{value:"sqlite_inlined_size",id:"sqlite_inlined_size",level:3},{value:"sqlite_max_size",id:"sqlite_max_size",level:3},{value:"sqlite_mode",id:"sqlite_mode",level:3},{value:"sqlite_cache_names",id:"sqlite_cache_names",level:3},{value:"two_level_cache_enabled",id:"two_level_cache_enabled",level:3},{value:"two_level_cache_minimum_size",id:"two_level_cache_minimum_size",level:3},{value:"two_level_cache_maximum_size",id:"two_level_cache_maximum_size",level:3},{value:"action_graph_cache_check_enabled",id:"action_graph_cache_check_enabled",level:3},{value:"max_action_graph_cache_entries",id:"max_action_graph_cache_entries",level:3},{value:"load_balancing_type",id:"load_balancing_type",level:3},{value:"slb_server_pool",id:"slb_server_pool",level:3},{value:"slb_ping_endpoint",id:"slb_ping_endpoint",level:3},{value:"slb_health_check_internal_millis",id:"slb_health_check_internal_millis",level:3},{value:"slb_timeout_millis",id:"slb_timeout_millis",level:3},{value:"slb_error_check_time_range_millis",id:"slb_error_check_time_range_millis",level:3},{value:"slb_max_error_percentage",id:"slb_max_error_percentage",level:3},{value:"slb_latency_check_time_range_millis",id:"slb_latency_check_time_range_millis",level:3},{value:"slb_max_acceptable_latency_millis",id:"slb_max_acceptable_latency_millis",level:3},{value:"client",id:"client",level:2},{value:"id",id:"id",level:3},{value:"skip-action-graph-cache",id:"skip-action-graph-cache",level:3},{value:"color",id:"color",level:2},{value:"ui",id:"ui",level:3},{value:"credentials",id:"credentials",level:2},{value:"cxx",id:"cxx",level:2},{value:"C/C++ platform flavors in <code>.buckconfig</code>",id:"cc-platform-flavors-in-buckconfig",level:4},{value:"cpp",id:"cpp",level:3},{value:"cc",id:"cc",level:3},{value:"ld",id:"ld",level:3},{value:"linker_platform",id:"linker_platform",level:3},{value:"cxxpp",id:"cxxpp",level:3},{value:"cxx",id:"cxx-1",level:3},{value:"aspp",id:"aspp",level:3},{value:"as",id:"as",level:3},{value:"ar",id:"ar",level:3},{value:"archiver_platform",id:"archiver_platform",level:3},{value:"cppflags",id:"cppflags",level:3},{value:"cflags",id:"cflags",level:3},{value:"ldflags",id:"ldflags",level:3},{value:"cxxppflags",id:"cxxppflags",level:3},{value:"cxxflags",id:"cxxflags",level:3},{value:"asppflags",id:"asppflags",level:3},{value:"asflags",id:"asflags",level:3},{value:"arflags",id:"arflags",level:3},{value:"ranlibflags",id:"ranlibflags",level:3},{value:"gtest_dep",id:"gtest_dep",level:3},{value:"untracked_headers",id:"untracked_headers",level:3},{value:"untracked_headers_whitelist",id:"untracked_headers_whitelist",level:3},{value:"should_remap_host_platform",id:"should_remap_host_platform",level:3},{value:"host_platform",id:"host_platform",level:3},{value:"default_platform",id:"default_platform",level:3},{value:"pch_enabled",id:"pch_enabled",level:3},{value:"link_weight",id:"link_weight",level:3},{value:"cache_links",id:"cache_links",level:3},{value:"default_reexport_all_header_dependencies",id:"default_reexport_all_header_dependencies",level:3},{value:"shlib_interfaces",id:"shlib_interfaces",level:3},{value:"independent_shlib_interfaces",id:"independent_shlib_interfaces",level:3},{value:"d",id:"d",level:2},{value:"base_compiler_flags",id:"base_compiler_flags",level:3},{value:"compiler",id:"compiler",level:3},{value:"library_path",id:"library_path",level:3},{value:"linker_flags",id:"linker_flags",level:3},{value:"doctor",id:"doctor",level:2},{value:"protocol",id:"protocol",level:3},{value:"endpoint_url",id:"endpoint_url",level:3},{value:"endpoint_timeout_ms",id:"endpoint_timeout_ms",level:3},{value:"endpoint_extra_request_args",id:"endpoint_extra_request_args",level:3},{value:"report_upload_path",id:"report_upload_path",level:3},{value:"report_max_size",id:"report_max_size",level:3},{value:"report_timeout_ms",id:"report_timeout_ms",level:3},{value:"report_max_upload_retries",id:"report_max_upload_retries",level:3},{value:"report_extra_info_command",id:"report_extra_info_command",level:3},{value:"download",id:"download",level:2},{value:"proxy",id:"proxy",level:3},{value:"maven_repo",id:"maven_repo",level:3},{value:"max_number_of_retries",id:"max_number_of_retries",level:3},{value:"in_build",id:"in_build",level:3},{value:"dx",id:"dx",level:2},{value:"threads",id:"threads-1",level:3},{value:"max_threads",id:"max_threads",level:3},{value:"max_heap_size",id:"max_heap_size",level:3},{value:"export_file",id:"export_file",level:2},{value:"input_directory_action",id:"input_directory_action",level:3},{value:"go",id:"go",level:2},{value:"root",id:"root",level:3},{value:"prefix",id:"prefix",level:3},{value:"tool",id:"tool",level:3},{value:"compiler",id:"compiler-1",level:3},{value:"assembler",id:"assembler",level:3},{value:"packer",id:"packer",level:3},{value:"linker",id:"linker",level:3},{value:"vendor_path",id:"vendor_path",level:3},{value:"project_path",id:"project_path",level:3},{value:"groovy",id:"groovy",level:2},{value:"groovy_home",id:"groovy_home",level:3},{value:"halide",id:"halide",level:2},{value:"target",id:"target",level:3},{value:"xcode_compile_script",id:"xcode_compile_script",level:3},{value:"httpserver",id:"httpserver",level:2},{value:"port",id:"port",level:3},{value:"incompatible",id:"incompatible",level:2},{value:"intellij",id:"intellij",level:2},{value:"default_android_manifest_path",id:"default_android_manifest_path",level:3},{value:"jdk_name",id:"jdk_name",level:3},{value:"jdk_type",id:"jdk_type",level:3},{value:"android_module_sdk_type",id:"android_module_sdk_type",level:3},{value:"android_module_sdk_name",id:"android_module_sdk_name",level:3},{value:"java_module_sdk_type",id:"java_module_sdk_type",level:3},{value:"java_module_sdk_name",id:"java_module_sdk_name",level:3},{value:"default_min_android_sdk_version",id:"default_min_android_sdk_version",level:3},{value:"generated_sources_label_map",id:"generated_sources_label_map",level:3},{value:"include_transitive_dependencies",id:"include_transitive_dependencies",level:3},{value:"module_group_name",id:"module_group_name",level:3},{value:"remove_unused_libraries",id:"remove_unused_libraries",level:3},{value:"aggregate_android_resource_modules",id:"aggregate_android_resource_modules",level:3},{value:"android_resource_module_aggregation_limit",id:"android_resource_module_aggregation_limit",level:3},{value:"project_compiler_output_url",id:"project_compiler_output_url",level:3},{value:"extra_compiler_output_modules_path",id:"extra_compiler_output_modules_path",level:3},{value:"java",id:"java",level:2},{value:"src_roots",id:"src_roots",level:3},{value:"extra_arguments",id:"extra_arguments",level:3},{value:"source_level",id:"source_level",level:3},{value:"target_level",id:"target_level",level:3},{value:"skip_checking_missing_deps",id:"skip_checking_missing_deps",level:3},{value:"jar_spool_mode",id:"jar_spool_mode",level:3},{value:"abi_generation_mode",id:"abi_generation_mode",level:3},{value:"unused_dependencies_action",id:"unused_dependencies_action",level:3},{value:"duplicates_log_level",id:"duplicates_log_level",level:3},{value:"kotlin",id:"kotlin",level:2},{value:"kotlinc",id:"kotlinc",level:3},{value:"external",id:"external",level:3},{value:"kotlin_home",id:"kotlin_home",level:3},{value:"log",id:"log",level:2},{value:"max_traces",id:"max_traces",level:3},{value:"compress_traces",id:"compress_traces",level:3},{value:"machine_readable_logger_enabled",id:"machine_readable_logger_enabled",level:3},{value:"build_details_template",id:"build_details_template",level:3},{value:"build_details_commands",id:"build_details_commands",level:3},{value:"lua",id:"lua",level:2},{value:"lua",id:"lua-1",level:3},{value:"cxx_library",id:"cxx_library",level:3},{value:"starter_type",id:"starter_type",level:3},{value:"native_starter_library",id:"native_starter_library",level:3},{value:"extension",id:"extension",level:3},{value:"maven_repositories",id:"maven_repositories",level:2},{value:"ndk",id:"ndk",level:2},{value:"ndk_version",id:"ndk_version",level:3},{value:"ndk_path",id:"ndk_path",level:3},{value:"ndk_repository_path",id:"ndk_repository_path",level:3},{value:"app_platform",id:"app_platform",level:3},{value:"app_platform_per_cpu_abi",id:"app_platform_per_cpu_abi",level:3},{value:"cpu_abis",id:"cpu_abis",level:3},{value:"compiler",id:"compiler-2",level:3},{value:"gcc_version",id:"gcc_version",level:3},{value:"clang_version",id:"clang_version",level:3},{value:"cxx_runtime",id:"cxx_runtime",level:3},{value:"cxx_runtime_type",id:"cxx_runtime_type",level:3},{value:"ocaml",id:"ocaml",level:2},{value:"ocaml.bytecode.compiler",id:"ocamlbytecodecompiler",level:3},{value:"ocaml.compiler",id:"ocamlcompiler",level:3},{value:"dep.tool",id:"deptool",level:3},{value:"lex.compiler",id:"lexcompiler",level:3},{value:"yacc.compiler",id:"yacccompiler",level:3},{value:"debug",id:"debug",level:3},{value:"interop.includes",id:"interopincludes",level:3},{value:"parser",id:"parser",level:2},{value:"python_interpreter",id:"python_interpreter",level:3},{value:"python_path",id:"python_path",level:3},{value:"polyglot_parsing_enabled",id:"polyglot_parsing_enabled",level:3},{value:"default_build_file_syntax",id:"default_build_file_syntax",level:3},{value:"disable_implicit_native_rules",id:"disable_implicit_native_rules",level:3},{value:"warn_about_deprecated_syntax",id:"warn_about_deprecated_syntax",level:3},{value:"project",id:"project",level:2},{value:"generate_android_manifest",id:"generate_android_manifest",level:3},{value:"ide",id:"ide",level:3},{value:"glob_handler",id:"glob_handler",level:3},{value:"allow_symlinks",id:"allow_symlinks",level:3},{value:"build_file_search_method",id:"build_file_search_method",level:3},{value:"watchman_query_timeout_ms",id:"watchman_query_timeout_ms",level:3},{value:"ide_force_kill",id:"ide_force_kill",level:3},{value:"initial_targets",id:"initial_targets",level:3},{value:"ignore",id:"ignore",level:3},{value:"pre_process",id:"pre_process",level:3},{value:"post_process",id:"post_process",level:3},{value:"parallel_parsing",id:"parallel_parsing",level:3},{value:"parsing_threads",id:"parsing_threads",level:3},{value:"build_file_import_whitelist",id:"build_file_import_whitelist",level:3},{value:"shared_libraries_in_bundles",id:"shared_libraries_in_bundles",level:3},{value:"motd",id:"motd",level:3},{value:"python",id:"python",level:2},{value:"Python platform flavors in <code>.buckconfig</code>",id:"python-platform-flavors-in-buckconfig",level:4},{value:"interpreter",id:"interpreter",level:3},{value:"inplace_interpreter_flags",id:"inplace_interpreter_flags",level:3},{value:"library",id:"library",level:3},{value:"native_link_strategy",id:"native_link_strategy",level:3},{value:"package_style",id:"package_style",level:3},{value:"path_to_pex_executor",id:"path_to_pex_executor",level:3},{value:"pex_extension",id:"pex_extension",level:3},{value:"version",id:"version",level:3},{value:"repositories",id:"repositories",level:2},{value:"resources",id:"resources",level:2},{value:"resource_aware_scheduling_enabled",id:"resource_aware_scheduling_enabled",level:3},{value:"managed_thread_count",id:"managed_thread_count",level:3},{value:"default_cpu_amount",id:"default_cpu_amount",level:3},{value:"default_memory_amount",id:"default_memory_amount",level:3},{value:"default_disk_io_amount",id:"default_disk_io_amount",level:3},{value:"default_network_io_amount",id:"default_network_io_amount",level:3},{value:"max_memory_resource",id:"max_memory_resource",level:3},{value:"max_disk_io_resource",id:"max_disk_io_resource",level:3},{value:"max_network_io_resource",id:"max_network_io_resource",level:3},{value:"resources_per_rule",id:"resources_per_rule",level:2},{value:"rust",id:"rust",level:2},{value:"compiler",id:"compiler-3",level:3},{value:"rustc_flags",id:"rustc_flags",level:3},{value:"rustc_binary_flags",id:"rustc_binary_flags",level:3},{value:"rustc_library_flags",id:"rustc_library_flags",level:3},{value:"unflavored_binaries",id:"unflavored_binaries",level:3},{value:"remap_src_paths",id:"remap_src_paths",level:3},{value:"force_rlib",id:"force_rlib",level:3},{value:"prefer_static_libs",id:"prefer_static_libs",level:3},{value:"incremental",id:"incremental",level:3},{value:"default_edition",id:"default_edition",level:3},{value:"sandbox",id:"sandbox",level:2},{value:"darwin_sandbox_enabled",id:"darwin_sandbox_enabled",level:3},{value:"genrule_sandbox_enabled",id:"genrule_sandbox_enabled",level:3},{value:"test",id:"test",level:2},{value:"incl_no_location_classes",id:"incl_no_location_classes",level:3},{value:"timeout",id:"timeout",level:3},{value:"rule_timeout",id:"rule_timeout",level:3},{value:"external_runner",id:"external_runner",level:3},{value:"thread_utilization_ratio",id:"thread_utilization_ratio",level:3},{value:"parallel_external_test_spec_computation_enabled",id:"parallel_external_test_spec_computation_enabled",level:3},{value:"threads",id:"threads-2",level:3},{value:"thrift",id:"thrift",level:2},{value:"compiler",id:"compiler-4",level:3},{value:"compiler2",id:"compiler2",level:3},{value:"tools",id:"tools",level:2},{value:"javac",id:"javac",level:3},{value:"javac_jar",id:"javac_jar",level:3},{value:"java_for_tests",id:"java_for_tests",level:3},{value:"compiler_class_name",id:"compiler_class_name",level:3},{value:"proguard",id:"proguard",level:3},{value:"proguard-max-heap-size",id:"proguard-max-heap-size",level:3},{value:"proguard-agentpath",id:"proguard-agentpath",level:3},{value:"ui",id:"ui-1",level:2},{value:"always_sort_threads_by_time",id:"always_sort_threads_by_time",level:3},{value:"error_message_augmentations",id:"error_message_augmentations",level:3},{value:"relativize_targets_to_working_directory",id:"relativize_targets_to_working_directory",level:3},{value:"enable_show_output_warning",id:"enable_show_output_warning",level:3},{value:"thread_line_limit",id:"thread_line_limit",level:3},{value:"thread_line_limit_on_warning",id:"thread_line_limit_on_warning",level:3},{value:"thread_line_limit_on_error",id:"thread_line_limit_on_error",level:3},{value:"truncate_failing_command",id:"truncate_failing_command",level:3},{value:"superconsole",id:"superconsole",level:3},{value:"warn_on_config_file_overrides",id:"warn_on_config_file_overrides",level:3},{value:"warn_on_config_file_overrides_ignored_files",id:"warn_on_config_file_overrides_ignored_files",level:3},{value:"worker",id:"worker",level:2},{value:"persistent",id:"persistent",level:3}],m={toc:s};function p(e){let{components:n,...t}=e;return(0,i.mdx)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"buckconfig"},".buckconfig"),(0,i.mdx)("p",null,"The root of your ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/about/overview.html"},"project")," must contain\na configuration file named ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". Before executing, Buck reads this file\nto incorporate any customizations it specifies."),(0,i.mdx)("h2",{id:"performance-impact-of-buck-configuration-changes"},"Performance impact of Buck configuration changes"),(0,i.mdx)("p",null,"Also, because configuration settings are sometimes included in the cache keys\nthat Buck uses in its caching system, changes to Buck's configuration can\ninvalidate previously-built artifacts in Buck's caches. If this occurs, Buck\nrebuilds those artifacts, which can impact your build time."),(0,i.mdx)("h2",{id:"the-buckconfig-file-uses-the-ini-file-format"},"The .buckconfig file uses the INI file format"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file uses the\n",(0,i.mdx)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/INI_file"},"INI file format"),". That is, it is divided\ninto ",(0,i.mdx)("em",{parentName:"p"},"sections")," where each section contains a collection of key ",(0,i.mdx)("em",{parentName:"p"},"names")," and key\n",(0,i.mdx)("em",{parentName:"p"},"values"),". The ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," implementation supports some modifications to the\nINI file format; these are discussed below."),(0,i.mdx)("h3",{id:"other-ini-file-parsers"},"Other INI file parsers"),(0,i.mdx)("p",null,"As mentioned previously, we have extended the INI file parser that Buck uses to\nparse configuration files. As a result, ",(0,i.mdx)("em",{parentName:"p"},"INI file parsers provided by other\nlanguages or libraries are often not able to parse Buck's configuration files\nsuccessfully"),"."),(0,i.mdx)("h3",{id:"dot-character-not-supported-in-section-names"},"Dot character not supported in section names"),(0,i.mdx)("p",null,"We do not support the use of the ",(0,i.mdx)("em",{parentName:"p"},"dot")," character (",(0,i.mdx)("inlineCode",{parentName:"p"},"."),") in section names within\nBuck configuration files. For example, the following is ",(0,i.mdx)("strong",{parentName:"p"},"not"),"\nsupported\u2014",(0,i.mdx)("em",{parentName:"p"},"although Buck does not issue a warning or error"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-ini"},"[foo.bar]\n  baz=1\n")),(0,i.mdx)("p",null,"Note that sometimes you might need to define your own custom sections, such as\nfor platform flavors for\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cxx"},"C++")," or\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#python"},"Python"),". These\nscenarios are examples of when you should be careful not to introduce the dot\ncharacter in section names. This constraint is because Buck uses the dot\ncharacter to delimit section names and key names in other contexts such as the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--config")," command-line parameter. For information about ",(0,i.mdx)("inlineCode",{parentName:"p"},"--config"),", see the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/common_parameters.html"},(0,i.mdx)("strong",{parentName:"a"},"Common Parameters")),"\ntopic."),(0,i.mdx)("h2",{id:"character-encoding"},"Character encoding"),(0,i.mdx)("p",null,"To ensure that any character can be encoded in a ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," key value, you\ncan use escape sequences to encode characters that would otherwise be\nproblematic. The following escape sequences are supported."),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"th"},"\\\\")),(0,i.mdx)("th",{parentName:"tr",align:null},"backslash"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},'\\"')),(0,i.mdx)("td",{parentName:"tr",align:null},"double quote")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"\\n")),(0,i.mdx)("td",{parentName:"tr",align:null},"newline")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"\\r")),(0,i.mdx)("td",{parentName:"tr",align:null},"carriage return")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"\\t")),(0,i.mdx)("td",{parentName:"tr",align:null},"tab")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"\\x##")),(0,i.mdx)("td",{parentName:"tr",align:null},"Unicode character with code point ## (in hex)")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"\\u####")),(0,i.mdx)("td",{parentName:"tr",align:null},"Unicode character with code point #### (in hex)")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:null},(0,i.mdx)("inlineCode",{parentName:"td"},"\\U########")),(0,i.mdx)("td",{parentName:"tr",align:null},"Unicode character with code point ######## (in hex)")))),(0,i.mdx)("h2",{id:"key-values-as-lists"},"Key values as lists"),(0,i.mdx)("p",null,"Although the standard INI format supports only key values that represent a\nsingle item, Buck supports key values that represent a list of items. The syntax\nis to separate the items in the list using the space (",(0,i.mdx)("inlineCode",{parentName:"p"},"0x20"),") character. For\nexample, a key value for the list of command-line flags to be passed to a\ncompiler could be represented as a list of the flags separated by spaces:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"flags = -foo -bar -baz -qux\n")),(0,i.mdx)("p",null,"When a key value is parsed as a list instead of a single item, the separator\ncharacter is interpreted as a separator only when it occurs ",(0,i.mdx)("em",{parentName:"p"},"outside of double\nquotes"),". For example, if ",(0,i.mdx)("inlineCode",{parentName:"p"},"flags")," is a key value interpreted as a list of items\nseparated by spaces, then"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'flags = -foo "-bar \\u0429"\n')),(0,i.mdx)("p",null,"results in the two strings: ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"-bar \u0429"),"; the space character between\n",(0,i.mdx)("inlineCode",{parentName:"p"},"-bar")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\u0429")," is not interpreted as a separator."),(0,i.mdx)("h2",{id:"transclusion-of-values-from-one-key-to-another"},"Transclusion of values from one key to another"),(0,i.mdx)("p",null,"Values from other keys can be transcluded into the current key using the\nfollowing syntax inside the current key value."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$(config <section>.<field>)\n")),(0,i.mdx)("p",null,"For example, to use the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#go.vendor_path"},(0,i.mdx)("inlineCode",{parentName:"a"},"[go].vendor_path")),"\nin a custom setting:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[custom_section]custom_value = $(config go.vendor_path)\n")),(0,i.mdx)("h2",{id:"comments"},"Comments"),(0,i.mdx)("p",null,"In addition to the semicolon (",(0,i.mdx)("inlineCode",{parentName:"p"},";"),"), you can use the pound sign (",(0,i.mdx)("inlineCode",{parentName:"p"},"#"),"), as a\ncomment character in ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),"."),(0,i.mdx)("h2",{id:"buckconfiglocal"},".buckconfig.local"),(0,i.mdx)("p",null,"The root of your ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/about/overview.html"},"project")," may contain a\nsecond configuration file named ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.local"),". Its format is the same as\nthat of ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),", but settings in ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," override those in\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". In practice, ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," is a version-controlled file that\ncontains settings that are applicable to all team members, whereas\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," is excluded from version control to allow users to define\npersonal settings, such as personal aliases."),(0,i.mdx)("h2",{id:"other-initialization-files"},"Other initialization files"),(0,i.mdx)("p",null,"In addition to the ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," files in the project\nroot, Buck reads configuration settings from the following additional locations,\nsome of which are actually directories:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Directory ",(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," located in the project root directory."),(0,i.mdx)("li",{parentName:"ol"},"File ",(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig")," and directory ",(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," located in the current\nuser's home directory which, on Unix-like systems, is available from the\n",(0,i.mdx)("inlineCode",{parentName:"li"},"HOME")," environment variable or through the ",(0,i.mdx)("inlineCode",{parentName:"li"},"~")," symbol."),(0,i.mdx)("li",{parentName:"ol"},"File ",(0,i.mdx)("inlineCode",{parentName:"li"},"buckconfig")," and directory ",(0,i.mdx)("inlineCode",{parentName:"li"},"buckconfig.d")," located in system directory\n",(0,i.mdx)("inlineCode",{parentName:"li"},"/etc/"),".")),(0,i.mdx)("p",null,"Buck treats ",(0,i.mdx)("em",{parentName:"p"},"any")," file\u2014irrespective of name\u2014in a ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.d"),"(",(0,i.mdx)("inlineCode",{parentName:"p"},"buckconfig.d"),")\ndirectory (excluding files found in subdirectories) as a Buck configuration\nfile, provided that it adheres to ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," syntax. Note that a\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.d")," directory is distinct from the similarly-named ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckd"),"\ndirectory which is used by the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/buckd.html"},"Buck Daemon (",(0,i.mdx)("inlineCode",{parentName:"a"},"buckd"),")")," . For a\ndescription of how Buck resolves collisions between settings in these\nconfiguration files, see the section\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#config-precedence"},(0,i.mdx)("strong",{parentName:"a"},"Precedence of Buck configuration specifications")),"\nbelow."),(0,i.mdx)("h2",{id:"command-line-control-of-configuration"},"Command-line control of configuration"),(0,i.mdx)("p",null,"In addition to the above configuration files, Buck supports specifying\nadditional configuration files from the Buck command line using the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--config-file")," parameter. You can also specify configuration settings\n",(0,i.mdx)("em",{parentName:"p"},"individually")," on the Buck command line using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"--config")," (",(0,i.mdx)("inlineCode",{parentName:"p"},"-c"),") parameter.\nFurthermore, you can aggregate these settings into ",(0,i.mdx)("em",{parentName:"p"},"flag files")," using the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--flagfile")," parameter. A flag file provides similar functionality to a\nconfiguration file but uses a different syntax. Flag files are sometimes called\n",(0,i.mdx)("em",{parentName:"p"},"mode files")," or ",(0,i.mdx)("em",{parentName:"p"},"at")," (",(0,i.mdx)("inlineCode",{parentName:"p"},"@"),") files. For more information about the ",(0,i.mdx)("inlineCode",{parentName:"p"},"--config-file"),"\nand ",(0,i.mdx)("inlineCode",{parentName:"p"},"--flagfile")," parameters, see the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/common_parameters.html"},(0,i.mdx)("strong",{parentName:"a"},"Common Parameters")),"\ntopic."),(0,i.mdx)("h2",{id:"precedence-of-buck-configuration-specifications"},"Precedence of Buck configuration specifications"),(0,i.mdx)("p",null,"The following list shows the order of precedence for how Buck interprets its\nconfiguration specifications. Settings specified using a method closer to the\ntop of the list have higher precedence and will override those lower on the\nlist. For example, the ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file in the project directory overrides a\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file in the user's ",(0,i.mdx)("inlineCode",{parentName:"p"},"HOME")," directory."),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Configuration specified on the command line using ",(0,i.mdx)("inlineCode",{parentName:"li"},"--config")," (",(0,i.mdx)("inlineCode",{parentName:"li"},"-c"),"),\n",(0,i.mdx)("inlineCode",{parentName:"li"},"--config-file")," and ",(0,i.mdx)("inlineCode",{parentName:"li"},"--flagfile"),". Configuration specified later on the\ncommand line overrides configuration specified earlier."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig.local")," in the project directory."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig")," in the project directory."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig")," in the ",(0,i.mdx)("inlineCode",{parentName:"li"},"HOME")," directory."),(0,i.mdx)("li",{parentName:"ol"},"Files in a ",(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," subdirectory of the project directory,\nirrespective of filename."),(0,i.mdx)("li",{parentName:"ol"},"Files in a ",(0,i.mdx)("inlineCode",{parentName:"li"},".buckconfig.d")," subdirectory of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"HOME")," directory, irrespective\nof filename."),(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("inlineCode",{parentName:"li"},"buckconfig")," in the ",(0,i.mdx)("inlineCode",{parentName:"li"},"/etc/")," directory."),(0,i.mdx)("li",{parentName:"ol"},"Files in a ",(0,i.mdx)("inlineCode",{parentName:"li"},"buckconfig.d")," subdirectory of the ",(0,i.mdx)("inlineCode",{parentName:"li"},"/etc/")," directory, irrespective\nof filename.")),(0,i.mdx)("p",null,"Files in a ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.d")," (",(0,i.mdx)("inlineCode",{parentName:"p"},"buckconfig.d"),") directory have precedence according\nto the lexicographical order of their file names. Files ",(0,i.mdx)("em",{parentName:"p"},"later")," in the\nlexicographical order have precedence over files earlier in that order."),(0,i.mdx)("h2",{id:"configuration-files-can-include-other-files"},"Configuration files can include other files"),(0,i.mdx)("p",null,"Any of the configuration files that we've discussed so far can also include by\nreference other files that contain configuration information. These included\nfiles can contain complete ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," sections or they can contain a group of\nkey name/value pairs that constitute part of a section. In this second use case,\nyou'll need to ensure that the ",(0,i.mdx)("em",{parentName:"p"},"included")," file is referenced beneath the\nappropriate section in the ",(0,i.mdx)("em",{parentName:"p"},"including")," file. Because of this additional\ncomplexity, we recommend that you include only files that contain complete\nsections. ",(0,i.mdx)("strong",{parentName:"p"},"Note:")," Inclusion of files is a Buck-specific extension to the INI\nfile parser that Buck uses. Therefore, if you use this feature, your Buck\nconfiguration files will probably not be parsable by other more-generic INI file\nparsers. The syntax to include a file is"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"<file:*path-to-included-file*>\n")),(0,i.mdx)("p",null,"where ",(0,i.mdx)("em",{parentName:"p"},"path-to-included-file")," is either a relative path from the including file\n(recommended) or an absolute path from the root of the file system. You can also\nspecify that the file should be included only if it exists by prefixing with a\nquestion mark (",(0,i.mdx)("inlineCode",{parentName:"p"},"?"),")."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"<?file:*path-to-included-file*>\n")),(0,i.mdx)("p",null,"If you use this prefix, it is not an error condition if the file does not exist;\nBuck just silently continues to process the rest of the configuration file. In\nthe following example, the ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file includes the file\n",(0,i.mdx)("inlineCode",{parentName:"p"},"cxx-other-platform.include")," which exists in the subdirectory\n",(0,i.mdx)("inlineCode",{parentName:"p"},"cxx-other-platform"),". The ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file will also include the file\n",(0,i.mdx)("inlineCode",{parentName:"p"},"future-platform")," from the directory ",(0,i.mdx)("inlineCode",{parentName:"p"},"future-platform.include")," if that file\nexists."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'#\n# .buckconfig\n#\n[cxx]\n  cxxppflags="-D MYMACRO=\\"Buck\\""\n\n<file:cxx-other-platform/cxx-other-platform.include>\n\n<?file:future-platform/future-platform.include>\n#\n# cxx-other-platform.include\n#\n[cxx#other_platform]\n  cxxppflags="-D MYMACRO=\\"Watchman\\""\n')),(0,i.mdx)("h2",{id:"sections"},"Sections"),(0,i.mdx)("p",null,"The following sections are recognized by Buck:\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#adb"},(0,i.mdx)("inlineCode",{parentName:"a"},"[adb]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#alias"},(0,i.mdx)("inlineCode",{parentName:"a"},"[alias]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#android"},(0,i.mdx)("inlineCode",{parentName:"a"},"[android]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#apple"},(0,i.mdx)("inlineCode",{parentName:"a"},"[apple]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#build"},(0,i.mdx)("inlineCode",{parentName:"a"},"[build]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#buildfile"},(0,i.mdx)("inlineCode",{parentName:"a"},"[buildfile]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#client"},(0,i.mdx)("inlineCode",{parentName:"a"},"[client]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#color"},(0,i.mdx)("inlineCode",{parentName:"a"},"[color]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#credentials"},(0,i.mdx)("inlineCode",{parentName:"a"},"[credentials]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cxx"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cxx]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#d"},(0,i.mdx)("inlineCode",{parentName:"a"},"[d]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#doctor"},(0,i.mdx)("inlineCode",{parentName:"a"},"[doctor]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#download"},(0,i.mdx)("inlineCode",{parentName:"a"},"[download]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#dx"},(0,i.mdx)("inlineCode",{parentName:"a"},"[dx]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#export_file"},(0,i.mdx)("inlineCode",{parentName:"a"},"[export_file]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#go"},(0,i.mdx)("inlineCode",{parentName:"a"},"[go]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#groovy"},(0,i.mdx)("inlineCode",{parentName:"a"},"[groovy]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#halide"},(0,i.mdx)("inlineCode",{parentName:"a"},"[halide]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#httpserver"},(0,i.mdx)("inlineCode",{parentName:"a"},"[httpserver]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#incompatible"},(0,i.mdx)("inlineCode",{parentName:"a"},"[incompatible]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#intellij"},(0,i.mdx)("inlineCode",{parentName:"a"},"[intellij]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#java"},(0,i.mdx)("inlineCode",{parentName:"a"},"[java]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#kotlin"},(0,i.mdx)("inlineCode",{parentName:"a"},"[kotlin]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#log"},(0,i.mdx)("inlineCode",{parentName:"a"},"[log]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#lua"},(0,i.mdx)("inlineCode",{parentName:"a"},"[lua]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#maven_repositories"},(0,i.mdx)("inlineCode",{parentName:"a"},"[maven_repositories]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ndk"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ndk]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ocaml"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ocaml]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#parser"},(0,i.mdx)("inlineCode",{parentName:"a"},"[parser]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#project"},(0,i.mdx)("inlineCode",{parentName:"a"},"[project]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#python"},(0,i.mdx)("inlineCode",{parentName:"a"},"[python]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#repositories"},(0,i.mdx)("inlineCode",{parentName:"a"},"[repositories]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#resources"},(0,i.mdx)("inlineCode",{parentName:"a"},"[resources]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#resources_per_rule"},(0,i.mdx)("inlineCode",{parentName:"a"},"[resources_per_rule]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#rust"},(0,i.mdx)("inlineCode",{parentName:"a"},"[rust]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#sandbox"},(0,i.mdx)("inlineCode",{parentName:"a"},"[sandbox]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#test"},(0,i.mdx)("inlineCode",{parentName:"a"},"[test]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#thrift"},(0,i.mdx)("inlineCode",{parentName:"a"},"[thrift]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#tools"},(0,i.mdx)("inlineCode",{parentName:"a"},"[tools]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ui"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ui]")),"\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#worker"},(0,i.mdx)("inlineCode",{parentName:"a"},"[worker]"))),(0,i.mdx)("h2",{id:"adb"},"[adb]"),(0,i.mdx)("p",null,"This section configures adb behavior."),(0,i.mdx)("h3",{id:"adb_restart_on_failure"},"adb_restart_on_failure"),(0,i.mdx)("p",null,"This specifies whether to restart adb on failure or not."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[adb]adb_restart_on_failure = true\n")),(0,i.mdx)("h3",{id:"multi_install_mode"},"multi_install_mode"),(0,i.mdx)("p",null,"This specifies whether multi-install mode is enabled or disabled by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[adb]multi_install_mode = false\n")),(0,i.mdx)("h3",{id:"staged_install_mode"},"staged_install_mode"),(0,i.mdx)("p",null,"This specifies whether staged install mode is enabled or disabled by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[adb]staged_install_mode = false\n")),(0,i.mdx)("h2",{id:"alias"},"[alias]"),(0,i.mdx)("p",null,"This section contains definitions of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target")," aliases."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[alias]app     = //apps/myapp:app\n  apptest = //apps/myapp:test\n")),(0,i.mdx)("p",null,"These aliases can then be used from the command line:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck build app\n$ buck test apptest\n")),(0,i.mdx)("p",null,"You can also suffix aliases with flavors:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck build app#src_jar# This will expand the alias and effectively build the target returned by:\n$ buck targets --resolve-alias app#src_jar//apps/myapp:app#src_jar\n")),(0,i.mdx)("h2",{id:"android"},"[android]"),(0,i.mdx)("p",null,"This section configures android-specific build behavior."),(0,i.mdx)("h3",{id:"build_tools_version"},"build_tools_version"),(0,i.mdx)("p",null,"This specifies the version of the Android SDK Build-tools that all Android code\nin the project should be built against. By default, Buck will select the newest\nversion found on the system."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[android]build_tools_version = 23.0.1\n")),(0,i.mdx)("h3",{id:"compile_sdk_version"},"compile_sdk_version"),(0,i.mdx)("p",null,"This specifies the version of the Android SDK that all Android code in the\nproject should be built against. Even if not specified, the version that Buck\nchose to use will be printed to the console during the build. A list of valid\nvalues on your system can be found by running ",(0,i.mdx)("inlineCode",{parentName:"p"},"android list target --compact"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[android]compile_sdk_version = Google Inc.:Google APIs:21\n")),(0,i.mdx)("h3",{id:"sdk_path"},"sdk_path"),(0,i.mdx)("p",null,"This specifies the absolute path to the Android SDK that all Android code in the\nproject should be built against. The default is empty. Setting this property has\nthe same effect as if you had set either of the following environment variables\nto the same value:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ANDROID_SDK")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ANDROID_SDK_ROOT")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ANDROID_HOME"))),(0,i.mdx)("p",null,"Note that Buck gives precedence to the values of these environment variables\u2014in\nthe order in which they are listed above\u2014over the value of this property in\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[android]sdk_path = /Library/Android/sdk\n")),(0,i.mdx)("h2",{id:"apple"},"[apple]"),(0,i.mdx)("p",null,"This section includes settings that control settings that are specific to Apple\nplatform rules."),(0,i.mdx)("h3",{id:"asset_catalog_validation"},"asset_catalog_validation"),(0,i.mdx)("p",null,"Buck can check errors in .xcassets' contents that can later cause silent\nfailures, like having multiple images with the same name or missing\n",(0,i.mdx)("inlineCode",{parentName:"p"},"Contents.json")," files. To add extra validation above what Xcode does, set this\noption to ",(0,i.mdx)("inlineCode",{parentName:"p"},"STRICT"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]asset_catalog_validation = XCODE\n")),(0,i.mdx)("h3",{id:"codesign"},"codesign"),(0,i.mdx)("p",null,"To override a default path to ",(0,i.mdx)("inlineCode",{parentName:"p"},"codesign"),", set this setting to either a file path\nor buck target."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]codesign = //path/to/target/that/creates:codesign\n")),(0,i.mdx)("h3",{id:"codesign_timeout"},"codesign_timeout"),(0,i.mdx)("p",null,"The timeout of the code-signing step in seconds. The value is set to 300 seconds\nby default if not specified explicitly."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]codesign_timeout = 600\n")),(0,i.mdx)("h3",{id:"code_sign_identities_command"},"code_sign_identities_command"),(0,i.mdx)("p",null,"Specifies a command with any optional arguments that Buck will use to get the\ncurrent key fingerprints available for code signing. This command should output\na list of hashes and common names to standard output in the same format as\n",(0,i.mdx)("inlineCode",{parentName:"p"},"security find-identity -v -p codesigning"),". If unspecified, Buck will use\n",(0,i.mdx)("inlineCode",{parentName:"p"},"security find-identity -v -p codesigning"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]code_sign_identities_command = path/to/command --arg1 --arg2\n")),(0,i.mdx)("h3",{id:"default_debug_info_format_for_binaries"},"default_debug_info_format_for_binaries"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"default_debug_info_format_for_binaries")," setting controls the default debug info\nformat that is used when building binary targets. If you don't specify it,\n",(0,i.mdx)("inlineCode",{parentName:"p"},"DWARF_AND_DSYM")," value will be used. You can disable debug data by specifying\n",(0,i.mdx)("inlineCode",{parentName:"p"},"NONE")," value. You can produce unstripped binary by specifying",(0,i.mdx)("inlineCode",{parentName:"p"},"DWARF")," value."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]default_debug_info_format_for_binaries = NONE\n")),(0,i.mdx)("h3",{id:"default_debug_info_format_for_libraries"},"default_debug_info_format_for_libraries"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"default_debug_info_format_for_libraries")," setting controls the default debug\ninfo format that is used when building dynamic library targets. If you don't\nspecify it, ",(0,i.mdx)("inlineCode",{parentName:"p"},"DWARF")," value will be used. You can disable debug data by specifying\n",(0,i.mdx)("inlineCode",{parentName:"p"},"NONE")," value. You can produce dSYM file for the library by\nspecifying",(0,i.mdx)("inlineCode",{parentName:"p"},"DWARF_AND_DSYM")," value."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]default_debug_info_format_for_libraries = DWARF\n")),(0,i.mdx)("h3",{id:"default_debug_info_format_for_tests"},"default_debug_info_format_for_tests"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"default_debug_info_format_for_tests")," setting controls the default debug info\nformat that is used when building test targets. If you don't specify it, ",(0,i.mdx)("inlineCode",{parentName:"p"},"DWARF"),"\nvalue will be used. You can disable debug data by specifying ",(0,i.mdx)("inlineCode",{parentName:"p"},"NONE")," value. You\ncan produce dSYM file by specifying",(0,i.mdx)("inlineCode",{parentName:"p"},"DWARF_AND_DSYM")," value."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]default_debug_info_format_for_tests = DWARF_AND_DSYM\n")),(0,i.mdx)("h3",{id:"device_helper_path"},"device_helper_path"),(0,i.mdx)("p",null,"If you want to have Buck be able to install to devices, you need to provide the\npath to the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/FBSimulatorControl/"},(0,i.mdx)("inlineCode",{parentName:"a"},"fbsimctl")),"\nbinary."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]device_helper_path = third-party/fbsimctl/fbsimctl\n")),(0,i.mdx)("h3",{id:"ipa_compression_level"},"ipa_compression_level"),(0,i.mdx)("p",null,"Specify a compression level used when creating ipa. The possible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"none"),": Do not compress ipa."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"min"),": Use minimum compression level."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"default")," (default): Use medium compression level."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"max"),": Use maximum compression level.")),(0,i.mdx)("p",null,"If omitted, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"default")," value will be used."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]ipa_compression_level = min\n")),(0,i.mdx)("h3",{id:"provisioning_profile_read_command"},"provisioning_profile_read_command"),(0,i.mdx)("p",null,"Specifies a command with any optional arguments that Buck will use to decode\nApple's provisioning profiles for iOS builds. The full path of the provisioning\nprofile will be appended after the command and any arguments specified here. If\nunspecified, Buck will use ",(0,i.mdx)("inlineCode",{parentName:"p"},"openssl smime -inform der -verify -noverify -in"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]provisioning_profile_read_command = path/to/command --arg1 --arg2\n")),(0,i.mdx)("h3",{id:"provisioning_profile_search_path"},"provisioning_profile_search_path"),(0,i.mdx)("p",null,"Specifies a path where Buck will look for provisioning profiles (files with\nextension ",(0,i.mdx)("inlineCode",{parentName:"p"},".mobileprovision"),") that it can use to provision the application to be\nused on a device. You can specify either an absolute path or one relative to the\nproject root. If unspecified, Buck will look in\n",(0,i.mdx)("inlineCode",{parentName:"p"},"~/Library/MobileDevice/Provisioning Profiles"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]provisioning_profile_search_path = path/to/provisioning/profiles\n")),(0,i.mdx)("h3",{id:"target_sdk_version"},"target_sdk_version"),(0,i.mdx)("p",null,"For each platform, you can specify the target SDK version to use. The format is\n",(0,i.mdx)("inlineCode",{parentName:"p"},"{platform}_target_sdk_version"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]iphonesimulator_target_sdk_version = 7.0\n  iphoneos_target_sdk_version = 7.0\n  macosx_target_sdk_version = 10.9\n")),(0,i.mdx)("h3",{id:"test_log"},"test_log"),(0,i.mdx)("p",null,"When running Apple tests via ",(0,i.mdx)("inlineCode",{parentName:"p"},"xctool"),", Buck can set environment variables to\ntell the tests where to write debug logs and what log level to use. By default,\nBuck tells ",(0,i.mdx)("inlineCode",{parentName:"p"},"xctool")," to set two environment variables named ",(0,i.mdx)("inlineCode",{parentName:"p"},"FB_LOG_DIRECTORY"),"and\n",(0,i.mdx)("inlineCode",{parentName:"p"},"FB_LOG_LEVEL")," when running tests which you can read from your test environment:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"  FB_LOG_DIRECTORY=buck-out/gen/path/to/logs\n  FB_LOG_LEVEL=debug\n")),(0,i.mdx)("p",null,"You can override the default names for these environment variables and the value\nfor the debug log level via the following config settings:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"  [apple]\n    test_log_directory_environment_variable=MY_LOG_DIRECTORY\n    test_log_level_environment_variable=MY_LOG_LEVEL\n    test_log_level=verbose\n")),(0,i.mdx)("h3",{id:"use_flavored_cxx_sections"},"use_flavored_cxx_sections"),(0,i.mdx)("p",null,"By default, Buck uses the C/C++ toolchain and flag settings in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"cxx"),"section\nto extend Apple C/C++ platform. With this parameter set, Buck will instead use\nsettings in ",(0,i.mdx)("inlineCode",{parentName:"p"},"cxx#")," sections (e.g. ",(0,i.mdx)("inlineCode",{parentName:"p"},"cxx#macosx-x86_64.cxx_flags=-foo"),")."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]use_flavored_cxx_sections = true\n")),(0,i.mdx)("h3",{id:"use_header_maps_in_xcode"},"use_header_maps_in_xcode"),(0,i.mdx)("p",null,"Xcode projects generated by Buck by default use header maps for header search\npaths. This speeds up builds for large projects over using regular directory\nheader search paths, but breaks some Xcode features, like header file name\nautocompletion. If that is an issue, use the following option to disable the use\nof header maps."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]use_header_maps_in_xcode = false\n")),(0,i.mdx)("h3",{id:"xcode_developer_dir"},"xcode_developer_dir"),(0,i.mdx)("p",null,"By default, Buck will use the output of ",(0,i.mdx)("inlineCode",{parentName:"p"},"xcode-select --print-path")," to determine\nwhere Xcode's developer directory is. However, you can specify a directory in\nthe config to override whatever value that would return."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]xcode_developer_dir = path/to/developer/directory\n")),(0,i.mdx)("h3",{id:"xcode_developer_dir_for_tests"},"xcode_developer_dir_for_tests"),(0,i.mdx)("p",null,"Optionally override the Xcode developer directory for running tests, if you want\nthem to be run with a different Xcode version than the version used for\nbuilding. If absent, falls back to ",(0,i.mdx)("inlineCode",{parentName:"p"},"xcode_developer_dir")," and finally\n",(0,i.mdx)("inlineCode",{parentName:"p"},"xcode-select --print-path"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]xcode_developer_dir_for_tests = path/to/developer/directory/for_tests\n")),(0,i.mdx)("h3",{id:"xctool_default_destination_specifier"},"xctool_default_destination_specifier"),(0,i.mdx)("p",null,"This setting is passed directly to ",(0,i.mdx)("inlineCode",{parentName:"p"},"xctool"),", and then to",(0,i.mdx)("inlineCode",{parentName:"p"},"xcodebuild")," as the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"-destination")," argument."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]xctool_default_destination_specifier = platform=iOS Simulator\n")),(0,i.mdx)("p",null,"For more detail, see the man page for ",(0,i.mdx)("inlineCode",{parentName:"p"},"xcodebuild"),". To access the man page, type\nthe following from your Terminal prompt:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"man xcodebuild\n")),(0,i.mdx)("p",null,"and then use ",(0,i.mdx)("inlineCode",{parentName:"p"},"/")," to search for the string ",(0,i.mdx)("inlineCode",{parentName:"p"},"Destinations"),"."),(0,i.mdx)("h3",{id:"xctool_path"},"xctool_path"),(0,i.mdx)("p",null,"If you want to run tests with Buck, you will need to get\n",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/xctool"},(0,i.mdx)("inlineCode",{parentName:"a"},"xctool"))," and tell Buck where to find it.\nThis setting lets you specify a path to a binary. You should use either this\nsetting or\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#apple.xctool_zip_target"},(0,i.mdx)("inlineCode",{parentName:"a"},"[apple].xctool_zip_target")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]xctool_path = path/to/binary/of/xctool\n")),(0,i.mdx)("h3",{id:"xctool_zip_target"},"xctool_zip_target"),(0,i.mdx)("p",null,"If you want to run tests with Buck, you will need to get\n",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/xctool"},(0,i.mdx)("inlineCode",{parentName:"a"},"xctool"))," and tell Buck where to find it.\nThis setting lets you specify a\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target"),". You should use\neither this setting or\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#apple.xctool_path"},(0,i.mdx)("inlineCode",{parentName:"a"},"[apple].xctool_path")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]xctool_zip_target = //path/to/target/that/creates:xctool-zip\n")),(0,i.mdx)("h3",{id:"_package_command"},"*","_","package_command"),(0,i.mdx)("p",null,"Specify a custom command to run for ",(0,i.mdx)("inlineCode",{parentName:"p"},"apple_package()")," rules. The syntax of this\nfield is similar to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"cmd")," field of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/genrule.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"genrule")),", and supports some expansions:\n",(0,i.mdx)("inlineCode",{parentName:"p"},"SRCS")," Expands to the absolute path of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"bundle")," argument output to\nthe",(0,i.mdx)("inlineCode",{parentName:"p"},"apple_package()")," rule. ",(0,i.mdx)("inlineCode",{parentName:"p"},"OUT")," Expands to the output file for the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"apple_package()")," rule. The file specified by this variable must always be\nwritten by this command. ",(0,i.mdx)("inlineCode",{parentName:"p"},"SDKROOT")," Expands to the SDK root directory for the\nrequested SDK. For\nexample,",(0,i.mdx)("inlineCode",{parentName:"p"},"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/"),".\nNote that since strings in the config can be quoted, literal quotes can only be\nwritten by quoting the string and use escaped quotes. If omitted, this will\nrevert to the built-in behavior. When this option is specified,\n",(0,i.mdx)("inlineCode",{parentName:"p"},"*_package_extension")," must also be specified."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'[apple]iphoneos_package_command = "\\"$PLATFORM_DIR/Developer/usr/bin/PackageApplication\\" \\"$SRCS\\" \\"$OUT\\""\n  iphoneos_package_extension = zip\n')),(0,i.mdx)("h3",{id:"_package_extension"},"*","_","package_extension"),(0,i.mdx)("p",null,"Specify the output extension for custom ",(0,i.mdx)("inlineCode",{parentName:"p"},"apple_package")," rules configured\nwith",(0,i.mdx)("inlineCode",{parentName:"p"},"*_package_command"),". This config option must be specified when\n",(0,i.mdx)("inlineCode",{parentName:"p"},"*_package_command")," is specified, or both omitted."),(0,i.mdx)("h3",{id:"_replacement"},"*","_","replacement"),(0,i.mdx)("p",null,"Replace Xcode provided tools from imported SDKs and toolchains. Input path must\npoint to a valid executable file. This takes precedence over\n",(0,i.mdx)("inlineCode",{parentName:"p"},"apple.*_xcode_tool_name_override")," which only searches for replacement within\nworkspace."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]*_replacement = /usr/bin/true\n")),(0,i.mdx)("h3",{id:"_toolchains_override"},"*","_","toolchains_override"),(0,i.mdx)("p",null,"Specify a comma-delimited custom list of toolchains to use when building with a\nparticular SDK. This is the Buck equivalent of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"TOOLCHAINS")," environment\nvariable when building with Xcode. If omitted, this will revert to the built-in\nbehavior."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"osx_toolchains_override = tools.stable,tools.swift40,tools.common\n")),(0,i.mdx)("h3",{id:"_version_override"},"*","_","version_override"),(0,i.mdx)("p",null,"Specify version string to use for Xcode tool. By default, Xcode tool's version\nvalue is calculated automatically from its container SDK and toolchain. But in\nsome cases (e.g. when tools are overridden by ",(0,i.mdx)("inlineCode",{parentName:"p"},"apple.*_replacement"),"), it needs\nto be manually overridden in order to prevent rule key collision."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]actool_replacement=/some/path/to/custom/actool\n    actool_version_override=custom_actool_1.0\n")),(0,i.mdx)("h3",{id:"_xcode_tool_name_override"},"*","_","xcode_tool_name_override"),(0,i.mdx)("p",null,"Specify custom Xcode tool name to use in place of existing one. When set, buck\nwill lookup Xcode search paths to locate the tool, and use it for tool\ninvocations. This value is ignored when ",(0,i.mdx)("inlineCode",{parentName:"p"},"apple.*_replacement")," for the same tool\nis set."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[apple]# Use (my_clang|my_actool) executable which exists in one of the# imported SDKs and toolchains, instead of the defaults.clang_xcode_tool_name_override=my_clang\n    actool_xcode_tool_name_override=my_actool\n")),(0,i.mdx)("h2",{id:"build"},"[build]"),(0,i.mdx)("p",null,"This section includes settings that control build engine behavior."),(0,i.mdx)("h3",{id:"artifact_cache_size_limit"},"artifact_cache_size_limit"),(0,i.mdx)("p",null,"Specifies the maximum size, in bytes, of a build artifact (output file) that\nBuck caches."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"#\n# Use a limit of 50 MB.\n#\nartifact_cache_size_limit = 52428800\n")),(0,i.mdx)("p",null,"This value is optional. If you do not specify a value, then it sets no limit to\nthe size of an artifact that Buck caches\u2014but see note below regarding\ndistributed caches. ",(0,i.mdx)("strong",{parentName:"p"},"Note:")," This value sets an upper bound on artifact size\nfor all values of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),".\nThe parameter\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.http_max_store_size"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].http_max_store_size")),"\nsets an artifact size limit ",(0,i.mdx)("em",{parentName:"p"},"only")," for distributed cache modes (",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," and\n",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"). Therefore, it is not meaningful to set a value for\n",(0,i.mdx)("inlineCode",{parentName:"p"},"http_max_store_size")," which is larger than the value of\n",(0,i.mdx)("inlineCode",{parentName:"p"},"artifact_cache_size_limit"),"."),(0,i.mdx)("h3",{id:"delete_temporaries"},"delete_temporaries"),(0,i.mdx)("p",null,"If true, Buck deletes some temporary files immediate after executing a build\nrule. This is useful for conserving disk space when performing large builds. By\ndefault, temporary files are not deleted."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]delete_temporaries = false\n")),(0,i.mdx)("h3",{id:"depfiles"},"depfiles"),(0,i.mdx)("p",null,"Configures the use of dependency files for rules that support them. This is an\noptimization that is useful when dependencies are over-specified and the rule\ncan dynamically determine the subset of dependencies it actually needs. The\npossible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"enabled"),": Use dependency files to avoid unnecessary rebuilds."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"cache")," (default): Use dependency files to avoid unnecessary rebuilds and to\nstore/fetch artifacts to/from the cache."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"disabled"),": Do not use dependency files for rebuild detection.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]depfiles = cache\n")),(0,i.mdx)("h3",{id:"engine"},"engine"),(0,i.mdx)("p",null,"This has two possible values that change the behavior of how Buck operates when\nbuilding a ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"shallow")," (default): only the required transitive dependencies of a\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_target.html"},"build target")," are materialized\nlocally. Cache hits can result in missing transitive dependencies that are not\nneeded for the final output."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"deep"),": ensure that all transitive dependencies of a\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_target.html"},"build target")," are materialized\nlocally.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]engine = shallow\n")),(0,i.mdx)("h3",{id:"max_depfile_cache_entries"},"max_depfile_cache_entries"),(0,i.mdx)("p",null,"Sets the maximum size of the depfile cache for each input source file. This is\nonly used when setting\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#build.depfiles"},(0,i.mdx)("inlineCode",{parentName:"a"},"[build].depfiles")),"\nto ",(0,i.mdx)("inlineCode",{parentName:"p"},"cache"),". An ideal setting for this should be big enough for the working set\nof all possible header states that a given unchanged source file uses."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]max_depfile_cache_entries = 256\n")),(0,i.mdx)("h3",{id:"network_threads"},"network_threads"),(0,i.mdx)("p",null,"The number of threads to be used for network I/O. The default value is number of\ncores of the machine."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]network_threads = 8\n")),(0,i.mdx)("h3",{id:"rule_key_caching"},"rule_key_caching"),(0,i.mdx)("p",null,"Enables caching of rule key calculations between builds when using the Buck\ndaemon."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]rule_key_caching = true\n")),(0,i.mdx)("h3",{id:"threads"},"threads"),(0,i.mdx)("p",null,"Sets the maximum number of threads to use for building. By default, Buck uses\nthe number of available cores multiplied by ",(0,i.mdx)("inlineCode",{parentName:"p"},"1.25"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]threads = 4\n")),(0,i.mdx)("h3",{id:"thread_core_ratio"},"thread_core_ratio"),(0,i.mdx)("p",null,"Sets the maximum number of threads to use for building as a ratio of the number\nof available cores (e.g. ",(0,i.mdx)("inlineCode",{parentName:"p"},"0.75")," on a 4 core machine would limit building to 3\nthreads, or a value of ",(0,i.mdx)("inlineCode",{parentName:"p"},"1.25")," on the same machine would attempt to use 5\nthreads)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]thread_core_ratio = 0.75\n")),(0,i.mdx)("h3",{id:"thread_core_ratio_max_threads"},"thread_core_ratio_max_threads"),(0,i.mdx)("p",null,"The maximum number of threads to use when calculating the number of build\nthreads from thread_core_ratio. (e.g. a value of 2 on a 4 core machine would\nensure that, at most, 2 threads were used, and value of 10 on a 40 core machine\nwould ensure that, at most, 10 threads were used)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]thread_core_ratio_max_threads = 10\n")),(0,i.mdx)("h3",{id:"thread_core_ratio_min_threads"},"thread_core_ratio_min_threads"),(0,i.mdx)("p",null,"The minimum number of threads to use when calculating the number of build\nthreads from thread_core_ratio. (e.g. a value of 1 on a 4 core machine would\nensure that, at least, 1 thread was used, and value of 4 on a 40 core machine\nwould ensure that, at least, 10 threads were used)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]thread_core_ratio_min_threads = 1\n")),(0,i.mdx)("h3",{id:"thread_core_ratio_reserved_cores"},"thread_core_ratio_reserved_cores"),(0,i.mdx)("p",null,"Limit the maximum number of build threads to be the number of detected cores\nminus this value. (e.g. a value of 1 on a 4 core machine would ensure that, at\nmost, 3 cores were used, and a value of 2 on a 40 core machine would ensure\nthat, at most, 38 cores were used)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]thread_core_ratio_reserved_cores = 1\n")),(0,i.mdx)("h3",{id:"type"},"type"),(0,i.mdx)("p",null,"Sets the type of the build that buck has been built with. This allows buck to\ndistinguish different kinds of builds. When you run ",(0,i.mdx)("inlineCode",{parentName:"p"},"ant")," locally, this will be\nautomatically set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOCAL_ANT"),". When you build buck using buck locally, e.g.\n",(0,i.mdx)("inlineCode",{parentName:"p"},"buck build buck"),", this will be automatically set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOCAL_PEX"),". If you are\ndeploying buck through central deployment system, you may want to set build type\nto ",(0,i.mdx)("inlineCode",{parentName:"p"},"RELEASE_PEX"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"buck build buck --config build.type=RELEASE_PEX\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Note:")," this setting does not affect how buck builds other rules. It only\naffects the way how ",(0,i.mdx)("em",{parentName:"p"},"buck will build buck"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[build]type = RELEASE_PEX\n")),(0,i.mdx)("h2",{id:"buildfile"},"[buildfile]"),(0,i.mdx)("p",null,"This section includes settings that control build file behavior."),(0,i.mdx)("h3",{id:"includes"},"includes"),(0,i.mdx)("p",null,"This sets a list of paths to files that will be automatically included by every\nbuild file. This is equivalent to calling\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/function/include_defs.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"include_defs()"))," in every build\nfile. ",(0,i.mdx)("strong",{parentName:"p"},"NOTE:")," We recommend that you do not use this property. This property\ncan make your builds difficult to maintain and debug, and it will be deprecated\nin a future release of Buck."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[buildfile]includes = //core/DEFS\n")),(0,i.mdx)("h3",{id:"name"},"name"),(0,i.mdx)("p",null,"The name of ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_file.html"},"build file"),"s within a\nproject. This defaults to ",(0,i.mdx)("inlineCode",{parentName:"p"},"BUCK"),". We recommend that you use the default name.\nHowever, you could specify a different name\u2014such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"TARGETS")," shown below\u2014in\norder to support, for example, a legacy project that used different buildfile\nnaming conventions."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[buildfile]name = TARGETS\n")),(0,i.mdx)("h2",{id:"cache"},"[cache]"),(0,i.mdx)("p",null,"This section configures build artifact caching. Caching can be configured to use\nthe local filesystem, an SQLite database, or a remote distributed cache that can\nbe shared among developers. Caching is disabled by default. The\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nsetting\u2014described below\u2014determines which properties are relevant to the caching\nconfiguration; other properties are ignored by Buck."),(0,i.mdx)("h3",{id:"mode"},"mode"),(0,i.mdx)("p",null,"A comma-separated list of caching policies to use. Valid values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"dir")," (default): Use a directory-based cache on the local filesystem."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"http"),": Use an http-based cache. See\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/concept/http_cache_api.html#binary_http"},"Binary HTTP Cache API"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"thrift_over_http"),": Use an http-based cache that uses thrift for object\nmetadata. See\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/concept/http_cache_api.html#thrift_http"},"Thrift over HTTP Cache API"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"sqlite"),": Use a SQLite-based cache that inlines small artifacts in the\ndatabase and stores large artifacts on the local filesystem.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]mode = dir, http, sqlite\n")),(0,i.mdx)("h3",{id:"dir"},"dir"),(0,i.mdx)("p",null,"The path to use for directory-based caching. The path can be: An absolute path\nin your local file system, such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"/Volumes/mySSD/cache"),". A path relative to\nyour home directory, that uses\n",(0,i.mdx)("a",{parentName:"p",href:"https://www.gnu.org/software/bash/manual/html_node/Tilde-Expansion.html"},"tilde (",(0,i.mdx)("inlineCode",{parentName:"a"},"~"),") expansion"),".\nsuch as ",(0,i.mdx)("inlineCode",{parentName:"p"},"~/local/cache"),". A path that is relative to the root of your Buck\nproject, such as\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buck-out.html"},(0,i.mdx)("strong",{parentName:"a"},(0,i.mdx)("inlineCode",{parentName:"strong"},"buck-out"))),(0,i.mdx)("strong",{parentName:"p"},(0,i.mdx)("inlineCode",{parentName:"strong"},"/cache")),",\nwhich is the ",(0,i.mdx)("strong",{parentName:"p"},"default"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]dir = buck-out/cache\n")),(0,i.mdx)("h3",{id:"dir_cache_names"},"dir_cache_names"),(0,i.mdx)("p",null,"A comma-separated list of names used to configure multiple dir caches. The\ncaches will be used ",(0,i.mdx)("strong",{parentName:"p"},"serially")," in the order in which their names are specified\nhere. If an artifact is found further along in the list, an attempt to store it\nin the caches earlier in the list will be made. In the following example, if the\nartifact is found in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"warm")," cache, it will not be stored in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"local"),"\ncache. Note: if ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cache] dir")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cache] dir_mode")," are found, then Buck will\nfall back to single dir cache more and ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cache] dir_cache_names")," will be\ncompletely ignored.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]mode = dir\n    dir_cache_names = warm, local\n[cache#warm]dir = ~/prefetched_cache\n    dir_mode = readonly\n[cache#local]dir = ~/buck_cache\n    dir_mode = readwrite\n")),(0,i.mdx)("h3",{id:"dir_max_size"},"dir_max_size"),(0,i.mdx)("p",null,"The maximum cache size for directory-based caching. The default size is\nunlimited.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]dir_max_size = 10GB\n")),(0,i.mdx)("h3",{id:"dir_mode"},"dir_mode"),(0,i.mdx)("p",null,"Dictates if the cache is ",(0,i.mdx)("inlineCode",{parentName:"p"},"readonly"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"passthrough"),", or ",(0,i.mdx)("inlineCode",{parentName:"p"},"readwrite")," (default)\nwhen using directory-based caching.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]dir_mode = readwrite\n")),(0,i.mdx)("h3",{id:"serve_local_cache"},"serve_local_cache"),(0,i.mdx)("p",null,"Make the directory-based cache available to other hosts on the network via\nBuck's HTTP server (enabled under\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#httpserver"},(0,i.mdx)("inlineCode",{parentName:"a"},"[httpserver]")),").\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]serve_local_cache = false\n")),(0,i.mdx)("h3",{id:"served_local_cache_mode"},"served_local_cache_mode"),(0,i.mdx)("p",null,"Dictates if the cache is ",(0,i.mdx)("inlineCode",{parentName:"p"},"readonly")," (default) or ",(0,i.mdx)("inlineCode",{parentName:"p"},"readwrite")," when\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.serve_local_cache"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].serve_local_cache")),"\nis enabled.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"dir"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]served_local_cache_mode = readwrite\n")),(0,i.mdx)("h3",{id:"http_url"},"http_url"),(0,i.mdx)("p",null,"The URL to use to contact the cache when using http-based caching. Buck\ncommunicates with the server using a\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/http_cache_api.html"},"simple API"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_url = http://localhost:8080\n")),(0,i.mdx)("h3",{id:"http_mode"},"http_mode"),(0,i.mdx)("p",null,"Dictates if the cache is ",(0,i.mdx)("inlineCode",{parentName:"p"},"readonly")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"readwrite")," (default) when using\nhttp-based caching.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_mode = readwrite\n")),(0,i.mdx)("h3",{id:"http_read_headers"},"http_read_headers"),(0,i.mdx)("p",null,"A semicolon-separated set of HTTP headers to use when reading from the cache\nwhen using http-based caching. The default is no headers.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_read_headers = User-Agent: buck\n")),(0,i.mdx)("h3",{id:"http_write_headers"},"http_write_headers"),(0,i.mdx)("p",null,"A semicolon-separated set of HTTP headers to use when writing to the cache when\nusing http-based caching. The default is no headers.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_write_headers = Authorization: XXXXXXX; User-Agent: buck\n")),(0,i.mdx)("h3",{id:"http_timeout_seconds"},"http_timeout_seconds"),(0,i.mdx)("p",null,"Dictates the timeout per connection when using http-based caching. It will be\nthe default value for http_connect_timeout_seconds, http_read_timeout_seconds,\nhttp_write_timeout_seconds if they're not set. The default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"3"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_timeout_seconds = 3\n")),(0,i.mdx)("h3",{id:"http_connect_timeout_seconds"},"http_connect_timeout_seconds"),(0,i.mdx)("p",null,"Dictates the timeout on http connect when using http-based caching. If the value\nis not set, it will try to use the value set for http_timeout_seconds then use\nthe default value ",(0,i.mdx)("inlineCode",{parentName:"p"},"3"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_connect_timeout_seconds = 3\n")),(0,i.mdx)("h3",{id:"http_read_timeout_seconds"},"http_read_timeout_seconds"),(0,i.mdx)("p",null,"Dictates the timeout on http writes when using http-based caching. If the value\nis not set, it will try to use the value set for http_timeout_seconds then use\nthe default value ",(0,i.mdx)("inlineCode",{parentName:"p"},"3"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_read_timeout_seconds = 3\n")),(0,i.mdx)("h3",{id:"http_write_timeout_seconds"},"http_write_timeout_seconds"),(0,i.mdx)("p",null,"Dictates the timeout on http reads when using http-based caching. If the value\nis not set, it will try to use the value set for http_timeout_seconds then use\nthe default value ",(0,i.mdx)("inlineCode",{parentName:"p"},"3"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_write_timeout_seconds = 3\n")),(0,i.mdx)("h3",{id:"http_max_concurrent_writes"},"http_max_concurrent_writes"),(0,i.mdx)("p",null,"The number of writer threads to use to upload to the http cache when using\nhttp-based caching. The default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"1"),". Note that when using multiple http\ncaches (see below), the writer thread pool is shared between them all.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_max_concurrent_writes = 1\n")),(0,i.mdx)("h3",{id:"http_writer_shutdown_timeout_seconds"},"http_writer_shutdown_timeout_seconds"),(0,i.mdx)("p",null,"The length of time to wait after the build completes for any remaining http\ncache uploads to complete before forcefully shutting down the writer thread pool\nwhen using http-based caching. The default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"1800")," (30 minutes).\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_writer_shutdown_timeout_seconds = 1800\n")),(0,i.mdx)("h3",{id:"http_error_message_format"},"http_error_message_format"),(0,i.mdx)("p",null,"This setting allows for the customization of how http cache errors appear to the\nuser. If the text ",(0,i.mdx)("inlineCode",{parentName:"p"},"{cache_name}")," is present, it will be replaced with the name\nof the cache. If the text ",(0,i.mdx)("inlineCode",{parentName:"p"},"{error_message}"),", it will be replaced with the error\nmessage.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_error_message_format = The cache named {cache_name} encountered an error: {error_message}\n")),(0,i.mdx)("h3",{id:"http_error_message_limit"},"http_error_message_limit"),(0,i.mdx)("p",null,"This setting allows to set after how many errors Buck will print the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"http_error_message_format"),". Every time it prints it the counter resets to 0 to\navoid spamming the console.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_error_message_limit = 100\n")),(0,i.mdx)("h3",{id:"http_max_store_attempts"},"http_max_store_attempts"),(0,i.mdx)("p",null,"Maximum number of times to attempt to store item to the cache before giving up.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_max_store_attempts = 1\n")),(0,i.mdx)("h3",{id:"http_store_retry_interval_millis"},"http_store_retry_interval_millis"),(0,i.mdx)("p",null,"Interval to wait if previous cache store request failed.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_store_retry_interval_millis = 1000\n")),(0,i.mdx)("h3",{id:"http_max_store_size"},"http_max_store_size"),(0,i.mdx)("p",null,"The max size in bytes that an artifact can be to get pushed to an http cache.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_max_store_size = 5000000\n")),(0,i.mdx)("h3",{id:"http_client_tls_cert"},"http_client_tls_cert"),(0,i.mdx)("p",null,"The path to a PEM encoded client X.509 TLS certificate that should be used for\nany HTTP requests to a remote cache. This operates on both read and write\nconnections. This can be useful within a server to restrict access to a write\npath, log which users are writing which artifacts, and generally authenticate\ncache clients. ",(0,i.mdx)("strong",{parentName:"p"},"Note:")," ",(0,i.mdx)("inlineCode",{parentName:"p"},"http_client_tls_key")," must be set for this setting to\nbe used.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_client_tls_cert = /etc/pki/client.crt\n")),(0,i.mdx)("h3",{id:"http_client_tls_key"},"http_client_tls_key"),(0,i.mdx)("p",null,"The path to a PEM encoded PKCS#8 key that should be used for any HTTP requests\nto a remote cache. This operates on both read and write connections. This can be\nuseful within a server to restrict access to a write path, log which users are\nwriting which artifacts, and generally authenticate cache clients. ",(0,i.mdx)("strong",{parentName:"p"},"Note:"),"\n",(0,i.mdx)("inlineCode",{parentName:"p"},"http_client_tls_cert")," must be set for this setting to be used.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"http")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]http_client_tls_key = /etc/pki/client.key\n")),(0,i.mdx)("h3",{id:"hybrid_thrift_endpoint"},"hybrid_thrift_endpoint"),(0,i.mdx)("p",null,"The HTTP endpoint to call if using\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/http_cache_api.html#thrift_http"},"Thrift over HTTP Cache API"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"thrift_over_http"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]hybrid_thrift_endpoint = /hybrid_endpoint\n")),(0,i.mdx)("h3",{id:"sqlite_inlined_size"},"sqlite_inlined_size"),(0,i.mdx)("p",null,"The maximum size for artifacts to be inlined. The default size is 40B.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"sqlite"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]sqlite_inlined_size = 10kB\n")),(0,i.mdx)("h3",{id:"sqlite_max_size"},"sqlite_max_size"),(0,i.mdx)("p",null,"The maximum cache size for SQLite-based caching. The default size is unlimited.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"sqlite"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]sqlite_max_size = 10GB\n")),(0,i.mdx)("h3",{id:"sqlite_mode"},"sqlite_mode"),(0,i.mdx)("p",null,"Dictates if the cache is ",(0,i.mdx)("inlineCode",{parentName:"p"},"readonly"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},"passthrough")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"readwrite")," (default) when\nusing SQLite-based caching\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"sqlite"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]sqlite_mode = readwrite\n")),(0,i.mdx)("h3",{id:"sqlite_cache_names"},"sqlite_cache_names"),(0,i.mdx)("p",null,"A comma-separated list of names used to configure multiple SQLite caches. The\ncaches will be used ",(0,i.mdx)("strong",{parentName:"p"},"serially")," in the order in which their names are specified\nhere. If an artifact is found further along in the list, an attempt to store it\nin the caches earlier in the list will be made. In the following example, if the\nartifact is found in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"warm")," cache, it will not be stored in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"local"),"\ncache.\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"\nmust contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"sqlite"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]mode = sqlite\n    sqlite_cache_names = warm, local\n[cache#warm]sqlite_mode = readonly\n[cache#local]sqlite_mode = readwrite\n")),(0,i.mdx)("h3",{id:"two_level_cache_enabled"},"two_level_cache_enabled"),(0,i.mdx)("p",null,"Have the Buck client perform 2-level stores and lookups on the artifacts. Every\ncache operation consists of 2 steps: content hash-based and RuleKey-based. This\nmakes it easier to reuse locally cached artifacts across different buck versions\nat the expense of higher latencies in the case where artifacts are not present\nin the local cache."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]two_level_cache_enabled = false\n")),(0,i.mdx)("h3",{id:"two_level_cache_minimum_size"},"two_level_cache_minimum_size"),(0,i.mdx)("p",null,"When performing a store artifacts smaller than this size will be stored\ndirectly, without the content hash redirection."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]two_level_cache_minimum_size = 1024\n")),(0,i.mdx)("h3",{id:"two_level_cache_maximum_size"},"two_level_cache_maximum_size"),(0,i.mdx)("p",null,"When performing a store artifacts bigger than this size will be stored directly,\nwithout the content hash redirection."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]two_level_cache_maximum_size = 1024\n")),(0,i.mdx)("h3",{id:"action_graph_cache_check_enabled"},"action_graph_cache_check_enabled"),(0,i.mdx)("p",null,"It enables an integrity checking mechanism in the action graph cache that\ncompares the a newly generated action graph with the one already in the cache in\nthe case of a cache hit. If the graphs do not match the build is stopped and the\nmismatching rules are printed and logged."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]action_graph_cache_check_enabled = false\n")),(0,i.mdx)("h3",{id:"max_action_graph_cache_entries"},"max_action_graph_cache_entries"),(0,i.mdx)("p",null,"Sets the maximum number of action graphs to cache. After this number, the\nleast-recently-used graph will be evicted. Defaults to 1."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]max_action_graph_cache_entries = 3\n")),(0,i.mdx)("h3",{id:"load_balancing_type"},"load_balancing_type"),(0,i.mdx)("p",null,"Decides whether the distributed cache connects to a single URL or it has a pool\nof servers and chooses which one to use based on client side load balancing.\nNOTE: 'slb","_","*","' configs only apply when CLIENT_SLB is enabled."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]load_balancing_type = SINGLE_SERVER, CLIENT_SLB\n")),(0,i.mdx)("h3",{id:"slb_server_pool"},"slb_server_pool"),(0,i.mdx)("p",null,"A comma separated list of server URLs of valid servers. The client side load\nbalancer will try to pick the best server to connect to for every single\nconnection."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_server_pool = http://my.server.one/,http://my.server.two\n")),(0,i.mdx)("h3",{id:"slb_ping_endpoint"},"slb_ping_endpoint"),(0,i.mdx)("p",null,"The client side load balancer will use this endpoint to check whether the server\nis in healthy state or not. It will also be used to measure request latency."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_ping_endpoint = /ping.php\n")),(0,i.mdx)("h3",{id:"slb_health_check_internal_millis"},"slb_health_check_internal_millis"),(0,i.mdx)("p",null,"The timeout in milliseconds between two consecutive client side load balancer\nhealth checks to the slb_server_pool."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_health_check_internal_millis = 1000\n")),(0,i.mdx)("h3",{id:"slb_timeout_millis"},"slb_timeout_millis"),(0,i.mdx)("p",null,"The connection timeout per health request made to each of the slb_server_pool\nservers. Any server that fails to respond within this period will be deemed\nunhealthy and not be used for cache requests."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_timeout_millis = 1000\n")),(0,i.mdx)("h3",{id:"slb_error_check_time_range_millis"},"slb_error_check_time_range_millis"),(0,i.mdx)("p",null,"The error rate to each individual server taking part in the slb_server_pool will\nbe measured in the time range/window specified by this config. In different\nwords, 'errors per second' is computed only for the last\nslb_error_check_time_range_millis."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_error_check_time_range_millis = 300000\n")),(0,i.mdx)("h3",{id:"slb_max_error_percentage"},"slb_max_error_percentage"),(0,i.mdx)("p",null,"The max error percentage allowed within the last\nslb_error_check_time_range_millis that is acceptable to keep a particular server\nmarked as healthy and usable by the load balancer. Expects a float value in the\ninterval ","[0, 1]","."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_max_error_percentage = 0.1\n")),(0,i.mdx)("h3",{id:"slb_latency_check_time_range_millis"},"slb_latency_check_time_range_millis"),(0,i.mdx)("p",null,"The latency to each individual server taking part in the slb_server_pool will be\nmeasured in the time range/window specified by this config. In different words,\n'server latency' is computed only for the last\nslb_latency_check_time_range_millis."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_latency_check_time_range_millis = 300000\n")),(0,i.mdx)("h3",{id:"slb_max_acceptable_latency_millis"},"slb_max_acceptable_latency_millis"),(0,i.mdx)("p",null,"If the latency of a ping request to a server in slb_server_pool is higher than\nthis, the server is deemed unhealthy and not used for cache operations."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cache]slb_max_acceptable_latency_millis = 1000\n")),(0,i.mdx)("h2",{id:"client"},"[client]"),(0,i.mdx)("p",null,"This section includes settings that provide information about the caller.\nAlthough these can be specified in ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),", in practice, they are\nspecified exclusively on the command line:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck --config client.id=tool-making-this-buck-invocation build buck\n")),(0,i.mdx)("h3",{id:"id"},"id"),(0,i.mdx)("p",null,"It is good practice for tools that call Buck to identify themselves via\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--config client.id=<toolname>"),". This makes it easier for developers to audit\nthe source of Buck invocations that they did not make directly. Note that the\nvalue of ",(0,i.mdx)("inlineCode",{parentName:"p"},"client.id")," is not factored into a build rule's cache key. It is purely\nfor auditing purposes."),(0,i.mdx)("h3",{id:"skip-action-graph-cache"},"skip-action-graph-cache"),(0,i.mdx)("p",null,"When Buck is run as a daemon, it caches the last Action Graph it used for a\nbuild so that if the next build identifies the same set of targets, the\n","[possibly expensive]"," Action Graph construction step can be avoided. Because only\nthe last Action Graph is cached, it may be costly to interleave a small build\njob among a series of incremental builds of an expensive rule:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck build //big:expensive-rule            # Initial Action Graph.\n$ buck build //big:expensive-rule            # Action Graph is reused.\n$ buck build //library#compilation-database  # Evicts costly Action Graph.\n$ buck build //big:expensive-rule            # Action Graph is rebuilt.\n")),(0,i.mdx)("p",null,"Although this scenario may sound contrived, it is very common when other tools\nmay also be running ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck build")," in the background. Work done by IDEs and\nlinters frequently fall into this category. In this case, the best practice is\nto add ",(0,i.mdx)("inlineCode",{parentName:"p"},"--config client.skip-action-graph-cache=true"),' for any sort of "one-off"\nbuild for which the cost of caching the Action Graph for the new build likely\noutweighs the benefit of evicting the Action Graph from the previous build. As\nthis is commonly the case for tools, this flag is frequently used in concert\nwith ',(0,i.mdx)("inlineCode",{parentName:"p"},"--config client.id"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck build //big:expensive-rule            # Initial Action Graph.\n$ buck build //big:expensive-rule            # Action Graph is reused.\n$ buck build \\                               # Cached Graph is unaffected.--config client.skip-action-graph-cache=true \\\n    --config client.id=nuclide \\\n    //library#compilation-database\n$ buck build //big:expensive-rule            # Action Graph is reused.\n")),(0,i.mdx)("h2",{id:"color"},"[color]"),(0,i.mdx)("p",null,"This section configures colored output of Buck."),(0,i.mdx)("h3",{id:"ui"},"ui"),(0,i.mdx)("p",null,"Enables (default) or disables colorized output in the terminal."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[color]ui = true\n")),(0,i.mdx)("h2",{id:"credentials"},"[credentials]"),(0,i.mdx)("p",null,"This section configures credentials to be used when fetching from authenticated\nMaven repositories via HTTPS. For a repository ",(0,i.mdx)("inlineCode",{parentName:"p"},"repo")," appearing in\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#maven_repositories"},(0,i.mdx)("inlineCode",{parentName:"a"},"[maven_repositories]")),",\nBuck reads the values of ",(0,i.mdx)("inlineCode",{parentName:"p"},"repo_user")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"repo_pass")," in this section (if\npresent), and passes them to the server using\n",(0,i.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Basic_access_authentication#Client_side"},"basic access authentication"),"\nwhen fetching. Note that authenticating in this way over plain HTTP connections\nis disallowed and will result in an error."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[maven_repositories]repo = https://example.com/repo[credentials]repo_user = joeuser\n  repo_pass = hunter2\n")),(0,i.mdx)("h2",{id:"cxx"},"[cxx]"),(0,i.mdx)("p",null,"This section configures the paths to the C and C++ toolchains' binaries and the\ndefault flags to pass to all invocations of them."),(0,i.mdx)("h4",{id:"cc-platform-flavors-in-buckconfig"},"C/C++ platform flavors in ",(0,i.mdx)("inlineCode",{parentName:"h4"},".buckconfig")),(0,i.mdx)("p",null,"Buck enables you to create additional platform ",(0,i.mdx)("em",{parentName:"p"},"flavors")," for C/C++ in\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". A platform flavor groups together a set of configuration\nparameters, which you can then reference at build time. To create a new C/C++\nplatform flavor, add a section with the header"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx#**flavor**]\n")),(0,i.mdx)("p",null,"to ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". If you invoke Buck with the specified ",(0,i.mdx)("em",{parentName:"p"},"flavor")," appended to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target"),", Buck uses the\nvalues in this section instead of those in ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cxx]"),". For example, to build with\nthe values in ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cxx#my-custom-flavor]")," instead of ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cxx]"),", you could invoke Buck\nusing the following command:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck build app#my-custom-flavor\n")),(0,i.mdx)("p",null,"You can also use these platform flavors, in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"platform_*")," arguments of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_binary.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_binary"))," and\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," rules. The\n",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/fbsamples/bucksamples/tree/master/hello-buck-cxx"},"Buck sample for C++"),"\ndemonstrates how to use a custom platform flavor."),(0,i.mdx)("h3",{id:"cpp"},"cpp"),(0,i.mdx)("p",null,"The path to the C preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cpp = /usr/bin/gcc\n")),(0,i.mdx)("h3",{id:"cc"},"cc"),(0,i.mdx)("p",null,"The path to the C compiler."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cc = /usr/bin/gcc\n")),(0,i.mdx)("h3",{id:"ld"},"ld"),(0,i.mdx)("p",null,"The path to the C/C++ linker driver."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]ld = /usr/bin/g++\n")),(0,i.mdx)("h3",{id:"linker_platform"},"linker_platform"),(0,i.mdx)("p",null,"The platform for the linker. Normally this is autodetected based on the system,\nbut it useful to set when cross compiling. Valid values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"DARWIN")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"GNU")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"WINDOWS"))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]linker_platform = DARWIN\n")),(0,i.mdx)("h3",{id:"cxxpp"},"cxxpp"),(0,i.mdx)("p",null,"The path to the C++ preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cxxpp = /usr/bin/g++\n")),(0,i.mdx)("h3",{id:"cxx-1"},"cxx"),(0,i.mdx)("p",null,"The path to the C++ compiler."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cxx = /usr/bin/g++\n")),(0,i.mdx)("h3",{id:"aspp"},"aspp"),(0,i.mdx)("p",null,"The path to the assembly preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]aspp = /usr/bin/gcc\n")),(0,i.mdx)("h3",{id:"as"},"as"),(0,i.mdx)("p",null,"The path to the assembler."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]as = /usr/bin/as\n")),(0,i.mdx)("h3",{id:"ar"},"ar"),(0,i.mdx)("p",null,"The path to the archiver."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]ar = /usr/bin/ar\n")),(0,i.mdx)("h3",{id:"archiver_platform"},"archiver_platform"),(0,i.mdx)("p",null,"The platform for the archiver. Normally this is autodetected based on the\nsystem, but it useful to set when cross compiling. Valid values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LINUX")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"MACOS")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"FREEBSD")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"WINDOWS"))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]archiver_platform = MACOS\n")),(0,i.mdx)("h3",{id:"cppflags"},"cppflags"),(0,i.mdx)("p",null,"The flags to pass to the C preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cppflags = -Wall\n")),(0,i.mdx)("h3",{id:"cflags"},"cflags"),(0,i.mdx)("p",null,"The flags to pass to the C compiler and preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cflags = -Wall\n")),(0,i.mdx)("h3",{id:"ldflags"},"ldflags"),(0,i.mdx)("p",null,"The flags to pass to the linker."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]ldflags = --strip-all\n")),(0,i.mdx)("h3",{id:"cxxppflags"},"cxxppflags"),(0,i.mdx)("p",null,"The flags to pass to the C++ preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cxxppflags = -Wall\n")),(0,i.mdx)("h3",{id:"cxxflags"},"cxxflags"),(0,i.mdx)("p",null,"The flags to pass to the C++ compiler and preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cxxflags = -Wall\n")),(0,i.mdx)("h3",{id:"asppflags"},"asppflags"),(0,i.mdx)("p",null,"The flags to pass to the assembly preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]asppflags = -W\n")),(0,i.mdx)("h3",{id:"asflags"},"asflags"),(0,i.mdx)("p",null,"The flags to pass to the assembler and assembly preprocessor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]asflags = -W\n")),(0,i.mdx)("h3",{id:"arflags"},"arflags"),(0,i.mdx)("p",null,"The flags to pass to the archiver."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]arflags = -X32_64\n")),(0,i.mdx)("h3",{id:"ranlibflags"},"ranlibflags"),(0,i.mdx)("p",null,"The flags to pass to the archive indexer."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]ranlibflags = --plugin someplugin\n")),(0,i.mdx)("h3",{id:"gtest_dep"},"gtest_dep"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_rule.html"},"build rule")," to compile the\n",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/google/googletest"},"Google Test")," framework."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]gtest_dep = //third-party/gtest:gtest\n")),(0,i.mdx)("p",null,"If you had your Google Test code in ",(0,i.mdx)("inlineCode",{parentName:"p"},"third-party/gtest/"),", the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_file.html"},"build file")," in that directory would\nlook something like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"cxx_library(\n  name = 'gtest',\n  srcs = ['googletest/src/gtest-all.cc','googlemock/src/gmock-all.cc','googlemock/src/gmock_main.cc',],\n  header_namespace = '',\n  exported_headers = subdir_glob([('googletest/include', '**/*.h'),('googlemock/include', '**/*.h'),]),\n  headers = subdir_glob([('googletest', 'src/*.cc'),('googletest', 'src/*.h'),('googlemock', 'src/*.cc'),('googlemock', 'src/*.h'),]),\n  platform_linker_flags = [('android', []),('', ['-lpthread']),],\n  visibility = ['//test/...',],)\n")),(0,i.mdx)("h3",{id:"untracked_headers"},"untracked_headers"),(0,i.mdx)("p",null,"How to handle header files that get included in a preprocessing step, but which\naren't explicitly owned by any dependencies. By default, Buck sandboxes headers\ninto symlink trees, but file relative inclusion and explicit preprocessor flags\ncan still cause untracked headers to get pulled into the build which can break\ncaching."),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ignore")," (default): Untracked headers are allowed in the build."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"warn"),": Print a warning to the console when an untracked header is used."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"error"),": Fail the build when an untracked header is used.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]untracked_headers = error\n")),(0,i.mdx)("h3",{id:"untracked_headers_whitelist"},"untracked_headers_whitelist"),(0,i.mdx)("p",null,"A list of regexes which match headers to exempt from untracked header\nverification."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]untracked_headers_whitelist = /usr/include/.*, /usr/local/include/.*\n")),(0,i.mdx)("h3",{id:"should_remap_host_platform"},"should_remap_host_platform"),(0,i.mdx)("p",null,"Specifies whether the ",(0,i.mdx)("inlineCode",{parentName:"p"},"default")," flavor should be remapped to the value of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cxx.host_platform"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cxx].host_platform")),"\nconfiguration parameter."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]\n  should_remap_host_platform = true\n")),(0,i.mdx)("p",null,"Default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"false"),". Because Buck is designed for cross-platform development,\nBuck normally ignores the host platform when building a target. For example,\nBuck normally builds the same Linux target irrespective of whether Buck itself\nis running on, say, Linux or macOS. The ",(0,i.mdx)("inlineCode",{parentName:"p"},"should_remap_host_platform"),"\nconfiguration parameter enables you to change Buck's behavior so that Buck's\ntarget platform is the host platform on which Buck is running."),(0,i.mdx)("h3",{id:"host_platform"},"host_platform"),(0,i.mdx)("p",null,"Specifies the host platform to use if\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cxx.should_remap_host_platform"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cxx].should_remap_host_platform")),"\nis ",(0,i.mdx)("inlineCode",{parentName:"p"},"true"),". The value that you specify could be one of Buck's internal platform\nflavors, such as ",(0,i.mdx)("inlineCode",{parentName:"p"},"linux-x86_64")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"macosx-x86_64"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]\n  host_platform = linux-x86_64\n[cxx]\n  host_platform = macosx-x86_64\n")),(0,i.mdx)("p",null,"or the value could be a custom platform flavor:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]\n  host_platform = my-custom-flavor\n")),(0,i.mdx)("p",null,"If ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cxx].should_remap_host_platform")," is ",(0,i.mdx)("inlineCode",{parentName:"p"},"true"),", but ",(0,i.mdx)("inlineCode",{parentName:"p"},"host_platform")," is\nunspecified, then Buck infers the host platform from the local computer to be\none of the following values:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"linux-x86_64")," (Linux)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"macosx-x86_64")," (macOS)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"freebsd-x86_64")," (FreeBSD)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"windows-x86_64")," (Windows)")),(0,i.mdx)("p",null,"If ",(0,i.mdx)("inlineCode",{parentName:"p"},"[cxx].should_remap_host_platform")," is unset\u2014or explicitly set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"false"),"\u2014then\nBuck ignores the value of ",(0,i.mdx)("inlineCode",{parentName:"p"},"host_platform")," ."),(0,i.mdx)("h3",{id:"default_platform"},"default_platform"),(0,i.mdx)("p",null,"Override the default platform for build rules."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]default_platform = iphonesimulator-x86_64\n")),(0,i.mdx)("h3",{id:"pch_enabled"},"pch_enabled"),(0,i.mdx)("p",null,"Whether prefix headers used by a\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," or other such build\nrule's ",(0,i.mdx)("inlineCode",{parentName:"p"},"prefix_header")," parameter should be separately precompiled, and used in\nthat rule's build. If this is disabled, the prefix header is included as-is,\nwithout precompilation. Default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"true"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]pch_enabled = false\n")),(0,i.mdx)("h3",{id:"link_weight"},"link_weight"),(0,i.mdx)("p",null,"The number of jobs that each C/C++ link rule consumes when running. By default,\nthis is ",(0,i.mdx)("inlineCode",{parentName:"p"},"1"),", but this can overridden to change how many link rules can execute\nin parallel for a given ",(0,i.mdx)("inlineCode",{parentName:"p"},"-j")," value. This is useful for builds with large I/O\nintensive static links where using a lower ",(0,i.mdx)("inlineCode",{parentName:"p"},"-j")," value is undesirable (since it\nreduces the parallelism for other build rule types)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]link_weight = 3\n")),(0,i.mdx)("h3",{id:"cache_links"},"cache_links"),(0,i.mdx)("p",null,"C/C++ link rules are cached by default. However, static C/C++ link jobs can take\nup lots of cache space and also get relatively low hit rates, so this config\noption provides a way to disable caching of all C/C++ link rules in the build."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]cache_links = false\n")),(0,i.mdx)("h3",{id:"default_reexport_all_header_dependencies"},"default_reexport_all_header_dependencies"),(0,i.mdx)("p",null,"Default value used for\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html#reexport_all_header_dependencies"},(0,i.mdx)("inlineCode",{parentName:"a"},"reexport_all_header_dependencies")),",\nwhen it's undefined on the build rule."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]default_reexport_all_header_dependencies = true\n")),(0,i.mdx)("h3",{id:"shlib_interfaces"},"shlib_interfaces"),(0,i.mdx)("p",null,"When linking a executable or shared library, any dependencies that build shared\nlibraries are normally added to the link line. If this option is set, Buck will\nuse shared library interfaces for these dependencies instead of full shared\nlibraries. Shared library interfaces are a subset of the original shared\nlibrary, removing parts of the shared library (e.g. the ",(0,i.mdx)("inlineCode",{parentName:"p"},".text")," segment for ELF)\nwhich are typically unused used when this library is being linked against. Using\nshared library interfaces can allow Buck's input-based rule keys to avoid\npotentially unnecessary re-links (see ",(0,i.mdx)("inlineCode",{parentName:"p"},"CxxSharedLibraryInterfaceIntegrationTest"),"\nfor examples)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]shlib_interfaces = enabled\n")),(0,i.mdx)("h3",{id:"independent_shlib_interfaces"},"independent_shlib_interfaces"),(0,i.mdx)("p",null,"Normally, a shared library interface for a rule is generated using it's shared\nlibrary. Since linking a rule's shared library requires the shared library\ninterfaces for all dependencies be built, this means that dynamic linking has\ninherent non-parallelism, due to this build dependency tree. When this option is\nset, Buck will build shared library interfaces independent of the rule's shared\nlibrary (e.g. by linking it's own shared library without any dependency shared\nlibraries), allowing all shared library interfaces to be built in parallel, and\ntherefore also allowing subsequent shared libraries to be built in parallel."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[cxx]independent_shlib_interfaces = true\n")),(0,i.mdx)("h2",{id:"d"},"[d]"),(0,i.mdx)("p",null,"This section configures how code written in D is compiled."),(0,i.mdx)("h3",{id:"base_compiler_flags"},"base_compiler_flags"),(0,i.mdx)("p",null,"Flags to pass to every invocation of the D compiler. This is a space-separated\nlist. It defaults to an empty list."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[d]base_compiler_flags = -I/some/path -g -O3\n")),(0,i.mdx)("h3",{id:"compiler"},"compiler"),(0,i.mdx)("p",null,"Path to the D compiler. If this parameter is not specified, Buck attempts to\nfind the D compiler automatically."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[d]compiler = /opt/dmd/bin/dmd\n")),(0,i.mdx)("h3",{id:"library_path"},"library_path"),(0,i.mdx)("p",null,"Directories to be searched for the D runtime libraries. This is a\ncolon-separated list. If this parameter is not specified, Buck attempts to\ndetect the location of the libraries automatically."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[d]library_path = /usr/local/lib:/opt/dmd/lib\n")),(0,i.mdx)("h3",{id:"linker_flags"},"linker_flags"),(0,i.mdx)("p",null,"Flags to pass to the linker when linking D code into an executable. This is a\nspace-separated list. If omitted, this value is constructed from d.library_path."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'[d]linker_flags = "-L/path to phobos" -lphobos2\n')),(0,i.mdx)("h2",{id:"doctor"},"[doctor]"),(0,i.mdx)("p",null,"This section defines variables that are associated with command ",(0,i.mdx)("inlineCode",{parentName:"p"},"doctor"),"."),(0,i.mdx)("h3",{id:"protocol"},"protocol"),(0,i.mdx)("p",null,"The protocol of communication, it can be either simple or JSON."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]protocol = json\n")),(0,i.mdx)("h3",{id:"endpoint_url"},"endpoint_url"),(0,i.mdx)("p",null,"The address of the remote endpoint that the request will go. This needs to be\ndefined in order for the command to work."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]endpoint_url = http://localhost:4545\n")),(0,i.mdx)("h3",{id:"endpoint_timeout_ms"},"endpoint_timeout_ms"),(0,i.mdx)("p",null,"The timeout in milliseconds before giving up contacting the analysis endpoint."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]endpoint_timeout_ms = 15\n")),(0,i.mdx)("h3",{id:"endpoint_extra_request_args"},"endpoint_extra_request_args"),(0,i.mdx)("p",null,"This sections of keys and values is added as parameters to the POST request send\nto the doctor remote endpoint."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]endpoint_extra_request_args = ref=>1245,token=>42\n")),(0,i.mdx)("h3",{id:"report_upload_path"},"report_upload_path"),(0,i.mdx)("p",null,"The address of the remote endpoint the report will be uploaded."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]report_upload_path = http://localhost:4546\n")),(0,i.mdx)("h3",{id:"report_max_size"},"report_max_size"),(0,i.mdx)("p",null,"The maximum size that the report endpoint can handle before giving up and\nstoring it only locally."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]report_max_size = 512MB\n")),(0,i.mdx)("h3",{id:"report_timeout_ms"},"report_timeout_ms"),(0,i.mdx)("p",null,"The timeout in milliseconds before giving up contacting the report endpoint."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]report_timeout_ms = 15\n")),(0,i.mdx)("h3",{id:"report_max_upload_retries"},"report_max_upload_retries"),(0,i.mdx)("p",null,"Times to try to upload to the report endpoint."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]report_max_upload_retries = 2\n")),(0,i.mdx)("h3",{id:"report_extra_info_command"},"report_extra_info_command"),(0,i.mdx)("p",null,"An extra command that the report should and attach the information to the\nuploaded report."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[doctor]report_extra_info_command = /custom/script/to/run.sh\n")),(0,i.mdx)("h2",{id:"download"},"[download]"),(0,i.mdx)("p",null,"This section configures downloading from the network during\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/fetch.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck fetch")),"."),(0,i.mdx)("h3",{id:"proxy"},"proxy"),(0,i.mdx)("p",null,"Buck will attempt to fetch files from the network, however, if you happen to be\nbehind a] firewall, this may not work correctly. You can supply a proxy when\ndownloading from HTTP","[S]"," servers with these three settings. Valid types for\n",(0,i.mdx)("inlineCode",{parentName:"p"},"proxy_type")," are ",(0,i.mdx)("inlineCode",{parentName:"p"},"HTTP")," (default) and ",(0,i.mdx)("inlineCode",{parentName:"p"},"SOCKS"),". These values correspond to\n",(0,i.mdx)("a",{parentName:"p",href:"http://docs.oracle.com/javase/8/docs/api/java/net/Proxy.Type.html"},"Java's Proxy.Type"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[download]proxy_host=proxy.example.com\n    proxy_port=8080\n    proxy_type=HTTP\n")),(0,i.mdx)("h3",{id:"maven_repo"},"maven_repo"),(0,i.mdx)("p",null,"If a remote file's URL starts with ",(0,i.mdx)("inlineCode",{parentName:"p"},"mvn:"),", that file (usually a jar) is supposed\nto come from a maven repo. You can specify the repo to download from here, or by\nsetting one or more repositories in\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#maven_repositories"},(0,i.mdx)("inlineCode",{parentName:"a"},"[maven_repositories]")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[download]maven_repo = https://repo1.maven.org/maven2\n")),(0,i.mdx)("h3",{id:"max_number_of_retries"},"max_number_of_retries"),(0,i.mdx)("p",null,"In case buck is unable to download a file, it will retry specified number of\ntimes before giving up. By default it's not set, so Buck is not going to retry\nfailed downloads."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[download]max_number_of_retries = 3\n")),(0,i.mdx)("h3",{id:"in_build"},"in_build"),(0,i.mdx)("p",null,"If true, allow downloads to be part of the build process. If false, buck build /\nrun / test will require the user to run 'buck fetch' first. This generally\nshould not be changed, to avoid surprising users with unexpected build times,\nwhen the cause is mostly download times. By default this set to false."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[download]in_build = true\n")),(0,i.mdx)("h2",{id:"dx"},"[dx]"),(0,i.mdx)("p",null,"This section controls how Buck invokes the dx tool."),(0,i.mdx)("h3",{id:"threads-1"},"threads"),(0,i.mdx)("p",null,"Fixed number of threads to run dexing steps with. If not specified, the optimal\nnumber is inferred from hardware specification of running machine."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[dx]threads = 4\n")),(0,i.mdx)("h3",{id:"max_threads"},"max_threads"),(0,i.mdx)("p",null,"The maximum number of threads allowed to run the dexing steps with. Since the\ndexing steps can use a lot of memory, it might be useful to set this to a lower\nvalue to avoid out-of-memory on systems that have a lot of CPU cores. This\nparameter is mostly useful when\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#dx.threads"},(0,i.mdx)("inlineCode",{parentName:"a"},"[dx].threads")),"\nis not specified and the number of threads is obtained based on hardware."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[dx]max_threads = 8\n")),(0,i.mdx)("h3",{id:"max_heap_size"},"max_heap_size"),(0,i.mdx)("p",null,"This option specifies how much memory is available when running dx out of\nprocess."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[dx]max_heap_size = 2g\n")),(0,i.mdx)("h2",{id:"export_file"},"[export_file]"),(0,i.mdx)("p",null,"This section configures behavior of ",(0,i.mdx)("inlineCode",{parentName:"p"},"export_file")," build rule."),(0,i.mdx)("h3",{id:"input_directory_action"},"input_directory_action"),(0,i.mdx)("p",null,"Defines the behavior of ",(0,i.mdx)("inlineCode",{parentName:"p"},"export_file")," when input of a build rule is a directory.\nSupport for directories will be removed soon and this option provides a way to\nmigrate a project to a state when none of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"export_file")," rules use\ndirectories as inputs. The valid values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"allow")," (default): directories are allowed and no action is taken,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"warn"),": emit a warning to the console,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"fail"),": fail the build.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[export_file]input_directory_action = fail\n")),(0,i.mdx)("h2",{id:"go"},"[go]"),(0,i.mdx)("p",null,"This section defines the Go toolchain. By default Buck will try to discovery the\nGo compiler and linker from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"go")," tool found in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"PATH"),"."),(0,i.mdx)("h3",{id:"root"},"root"),(0,i.mdx)("p",null,"If you have a non-standard Go install, you will need to set the Go root. The\nroot should contain ",(0,i.mdx)("inlineCode",{parentName:"p"},"pkg")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"bin")," directories."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]root = /opt/golang/libexec\n")),(0,i.mdx)("h3",{id:"prefix"},"prefix"),(0,i.mdx)("p",null,"For interoperability with the go tool, you may specify a prefix for your default\npackage names."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]prefix = github.com/facebook/buck\n")),(0,i.mdx)("h3",{id:"tool"},"tool"),(0,i.mdx)("p",null,"You can specify the path to find the ",(0,i.mdx)("inlineCode",{parentName:"p"},"go")," tool. This in turn will allow Buck to\ndiscover the compiler/linker by default. This defaults to ",(0,i.mdx)("inlineCode",{parentName:"p"},"${go.root}/bin/go"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]tool = /usr/local/bin/go\n")),(0,i.mdx)("h3",{id:"compiler-1"},"compiler"),(0,i.mdx)("p",null,"The full path to the Go compiler. This is normally automatically discovered."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]compiler = /usr/local/libexec/go/pkg/tool/darwin_amd64/compile\n")),(0,i.mdx)("h3",{id:"assembler"},"assembler"),(0,i.mdx)("p",null,"The full path to the Go assembler. This is normally automatically discovered."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]assembler = /usr/local/libexec/go/pkg/tool/darwin_amd64/asm\n")),(0,i.mdx)("h3",{id:"packer"},"packer"),(0,i.mdx)("p",null,"The full path to the Go packer. This is normally automatically discovered."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]packer = /usr/local/libexec/go/pkg/tool/darwin_amd64/pack\n")),(0,i.mdx)("h3",{id:"linker"},"linker"),(0,i.mdx)("p",null,"The full path to the Go linker. This is normally automatically discovered."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]linker = /usr/local/libexec/go/pkg/tool/darwin_amd64/link\n")),(0,i.mdx)("h3",{id:"vendor_path"},"vendor_path"),(0,i.mdx)("p",null,"A list of colon (:) separated list of directories to include for including in\nthe importmap for Go dependencies. Packages in these directories are allowed to\nbe imported given just the relative path to the package. This is similar to how\n'vendor' directories work. e.g you can use ",(0,i.mdx)("inlineCode",{parentName:"p"},"import golang.org/x/net")," for a\npackage that lives in",(0,i.mdx)("inlineCode",{parentName:"p"},"/golang.org/x/net"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]vendor_path = third-party/go\n")),(0,i.mdx)("h3",{id:"project_path"},"project_path"),(0,i.mdx)("p",null,"You can specify the path where ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck project")," will store dynamically generated\nfiles (ex. genrule). This is extension to ",(0,i.mdx)("inlineCode",{parentName:"p"},"$GOPATH"),", particularly usefully while\nworking with native go toolchain or IDE's."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[go]project_path = third-party/go\n")),(0,i.mdx)("h2",{id:"groovy"},"[groovy]"),(0,i.mdx)("p",null,"This section configures the ",(0,i.mdx)("a",{parentName:"p",href:"http://groovy-lang.org/"},"Groovy")," toolchain."),(0,i.mdx)("h3",{id:"groovy_home"},"groovy_home"),(0,i.mdx)("p",null,"This defines the value of ",(0,i.mdx)("inlineCode",{parentName:"p"},"GROOVY_HOME")," that Buck should use. If it is not\nprovided, Buck will use the system's ",(0,i.mdx)("inlineCode",{parentName:"p"},"GROOVY_HOME")," by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[groovy]groovy_home = /path/to/groovy_home\n")),(0,i.mdx)("h2",{id:"halide"},"[halide]"),(0,i.mdx)("p",null,"This section configures the ",(0,i.mdx)("a",{parentName:"p",href:"http://halide-lang.org/"},"Halide")," platform mappings\nand toolchain."),(0,i.mdx)("h3",{id:"target"},"target"),(0,i.mdx)("p",null,"This defines the C++ platform flavor to Halide target mapping. Each key should\nbegin with the prefix ",(0,i.mdx)("inlineCode",{parentName:"p"},"target_"),", followed by the flavor name. The corresponding\nvalue should be the Halide target string to use when building for that flavor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[halide]target_iphonesimulator-x86_64 = x86-64-osx\n  target_iphoneos-arm64         = arm-64-ios\n")),(0,i.mdx)("h3",{id:"xcode_compile_script"},"xcode_compile_script"),(0,i.mdx)("p",null,'The optional path to a shell script which should be used for invoking the Halide\nAOT "compiler" when building projects that include Halide targets in Xcode.'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[halide]xcode_compile_script = //path/to/script.sh\n")),(0,i.mdx)("h2",{id:"httpserver"},"[httpserver]"),(0,i.mdx)("p",null,"Option to enable an experimental web server that presents a UI to explore build\ndata. Note that Buck must be run as a daemon in order for the web server to be\navailable."),(0,i.mdx)("h3",{id:"port"},"port"),(0,i.mdx)("p",null,"This sets the port to use for the web server. There are three possible values:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"n > 0"),": For any positive integer, Buck will attempt to make the server\navailable on that port."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0"),": Buck will find a free port for the server to use and print it out on the\ncommand line."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"-1"),": Explicitly disables the server.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[httpserver]port = 8080\n")),(0,i.mdx)("h2",{id:"incompatible"},"[incompatible]"),(0,i.mdx)("p",null,"This section controls features of buck that are in the process of being\ndeprecated."),(0,i.mdx)("h2",{id:"intellij"},"[intellij]"),(0,i.mdx)("p",null,"This section configures a project generated for IntelliJ IDEA by ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck project"),"\ncommand."),(0,i.mdx)("h3",{id:"default_android_manifest_path"},"default_android_manifest_path"),(0,i.mdx)("p",null,"The default manifest file that should be used in Android IntelliJ modules when\nbuck cannot detect the correct manifest to use."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]default_android_manifest_path = shared/AndroidManifest.xml\n")),(0,i.mdx)("h3",{id:"jdk_name"},"jdk_name"),(0,i.mdx)("p",null,"IntelliJ project SDK name."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]jdk_name = Java SDK 1.6\n")),(0,i.mdx)("h3",{id:"jdk_type"},"jdk_type"),(0,i.mdx)("p",null,"IntelliJ project SDK type."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]jdk_type = Android SDK or JavaSDK\n")),(0,i.mdx)("h3",{id:"android_module_sdk_type"},"android_module_sdk_type"),(0,i.mdx)("p",null,"Default Android SDK type for android modules."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]android_module_sdk_type = Android SDK\n")),(0,i.mdx)("h3",{id:"android_module_sdk_name"},"android_module_sdk_name"),(0,i.mdx)("p",null,"Default Android SDK name for android modules."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]android_module_sdk_name = Android API 23 Platform\n")),(0,i.mdx)("h3",{id:"java_module_sdk_type"},"java_module_sdk_type"),(0,i.mdx)("p",null,"SDK type for Java modules."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]java_module_sdk_type = JavaSDK\n")),(0,i.mdx)("h3",{id:"java_module_sdk_name"},"java_module_sdk_name"),(0,i.mdx)("p",null,"SDK name for Java modules."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]java_module_sdk_name = 1.8\n")),(0,i.mdx)("h3",{id:"default_min_android_sdk_version"},"default_min_android_sdk_version"),(0,i.mdx)("p",null,"Default minimum Android SDK version supported for this project. Overwritten by\nmin SDK version if specified in target's AndroidManifest.xml."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]default_min_android_sdk_version = 9\n")),(0,i.mdx)("h3",{id:"generated_sources_label_map"},"generated_sources_label_map"),(0,i.mdx)("p",null,"Allows adding folders with generated source code to IntelliJ project. These\nfolders are added when a target has a label specified in this option. In the\nexample below, if target ",(0,i.mdx)("inlineCode",{parentName:"p"},"//app/target")," has label ",(0,i.mdx)("inlineCode",{parentName:"p"},"generated_code1")," folder\n",(0,i.mdx)("inlineCode",{parentName:"p"},"buck-out/gen/app/lib/__lib_target1__")," will be added to IntelliJ project."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]generated_sources_label_map = generated_code_1 => __%name%_target1__,\n                       generated_code2 => __%name%_target2__\n")),(0,i.mdx)("h3",{id:"include_transitive_dependencies"},"include_transitive_dependencies"),(0,i.mdx)("p",null,"Add transitive dependencies as RUNTIME library."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]include_transitive_dependencies = false\n")),(0,i.mdx)("h3",{id:"module_group_name"},"module_group_name"),(0,i.mdx)("p",null,"Specify module group name when grouping modules. If it is set to '', modules are\nnot grouped."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]module_group_name = modules\n")),(0,i.mdx)("h3",{id:"remove_unused_libraries"},"remove_unused_libraries"),(0,i.mdx)("p",null,"Removes unused libraries from .idea/libraries."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]remove_unused_libraries = true\n")),(0,i.mdx)("h3",{id:"aggregate_android_resource_modules"},"aggregate_android_resource_modules"),(0,i.mdx)("p",null,"Forces ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck project")," to aggregate modules with Android resources. This\naggregation is performed only if aggregation mode is not ",(0,i.mdx)("inlineCode",{parentName:"p"},"none"),". ",(0,i.mdx)("strong",{parentName:"p"},"Note:")," using\nthis type of aggregation disables Android layout editor provided by Android\nplugin. The layout files can still be edited using the XML editor."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]aggregate_android_resource_modules = true\n")),(0,i.mdx)("h3",{id:"android_resource_module_aggregation_limit"},"android_resource_module_aggregation_limit"),(0,i.mdx)("p",null,"The maximum number of targets that can be aggregated into one module with\nAndroid resources. This limit is a workaround to avoid a problem when Android\nplugin cannot operate on modules with a big number of resource folders."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]android_resource_module_aggregation_limit = 1000\n")),(0,i.mdx)("h3",{id:"project_compiler_output_url"},"project_compiler_output_url"),(0,i.mdx)("p",null,"The output directory for IntelliJ's builds."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]project_compiler_output_url = intellij-out/classes\n")),(0,i.mdx)("h3",{id:"extra_compiler_output_modules_path"},"extra_compiler_output_modules_path"),(0,i.mdx)("p",null,"This option specifies the location of additional modules for code generated\noutside of buck graph. For example, it can be used to specify the location of\nR.java classes generated for Android plugin to help Layout Preview with\nresolving references to resources."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[intellij]extra_compiler_output_modules_path = buck-out/extra-intellij-output\n")),(0,i.mdx)("h2",{id:"java"},"[java]"),(0,i.mdx)("p",null,"This section configures the Java toolchain."),(0,i.mdx)("h3",{id:"src_roots"},"src_roots"),(0,i.mdx)("p",null,"The paths to roots of Java code (where a root contains a tree of Java folders\nwhere the folder structure mirrors the package structure). This list of paths is\ncomma-delimited. Paths that start with a slash are relative to the root of the\nproject, and all other paths can match a folder anywhere in the tree. In the\nexample below, we match all folders named ",(0,i.mdx)("inlineCode",{parentName:"p"},"src"),", and ",(0,i.mdx)("inlineCode",{parentName:"p"},"java")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"javatests")," at\nthe root of the project."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]src_roots = src, /java/, /javatests/\n")),(0,i.mdx)("h3",{id:"extra_arguments"},"extra_arguments"),(0,i.mdx)("p",null,"A comma-delimited list of flags to pass the Java compiler."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]extra_arguments = -g\n")),(0,i.mdx)("h3",{id:"source_level"},"source_level"),(0,i.mdx)("p",null,"The default version of Java for source files. Also defines the project language\nlevel in IntelliJ."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]source_level = 7\n")),(0,i.mdx)("h3",{id:"target_level"},"target_level"),(0,i.mdx)("p",null,"The default version of Java for generated code."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]target_level = 7\n")),(0,i.mdx)("h3",{id:"skip_checking_missing_deps"},"skip_checking_missing_deps"),(0,i.mdx)("p",null,"Buck will attempt to analyze build failures and suggest dependencies that might\nnot be declared in order to fix the failure. On large projects, this can be\nslow. This setting disables the check."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]skip_checking_missing_deps = false\n")),(0,i.mdx)("h3",{id:"jar_spool_mode"},"jar_spool_mode"),(0,i.mdx)("p",null,"Specifies how the compiler output to the ",(0,i.mdx)("inlineCode",{parentName:"p"},".jar")," file should be spooled. The\nvalid modes are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"intermediate_to_disk")," (default): writes the intermediate ",(0,i.mdx)("inlineCode",{parentName:"li"},".class")," files from\nthe compiler output to disk. They are then packed into a ",(0,i.mdx)("inlineCode",{parentName:"li"},".jar"),"."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"direct_to_jar"),": compiler output will be directly written to a ",(0,i.mdx)("inlineCode",{parentName:"li"},".jar")," file\nwith the intermediate ",(0,i.mdx)("inlineCode",{parentName:"li"},".class")," files held in memory. The compiler output will\nstill be written to disk if there are any post-processing commands specified\nduring the build.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]jar_spool_mode = intermediate_to_disk\n")),(0,i.mdx)("h3",{id:"abi_generation_mode"},"abi_generation_mode"),(0,i.mdx)("p",null,"Specifies how Buck should create ABI jars when computing\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/rule_keys.html#abi_rule_keys"},"ABI rule keys"),". Values\nother than ",(0,i.mdx)("inlineCode",{parentName:"p"},"class")," may not be suitable for all rules; this setting may be\noverridden on a per-rule basis using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"abi_generation_mode")," parameter on each\nrule. The valid modes are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"class")," (default): creates an ABI jar for each library by first building the\nlibrary and then stripping out any information that is not part of the\ninterface (such as method bodies and private members).")),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"source"),": creates an ABI jar for each library in the process of building the\nlibrary, via a plugin to the Java compiler. This improves build times by\nallowing each library's dependents to start building before the library is done\nbuilding. Implies ",(0,i.mdx)("inlineCode",{parentName:"p"},"jar_spool_mode = direct_to_jar"),". ",(0,i.mdx)("inlineCode",{parentName:"p"},"source_only"),": creates an\nABI jar for each library by referencing only the source code of the library,\nwithout considering (most of) its dependencies. This can drastically improve\nbuild times, especially in larger apps or in build environments with a large\nnumber of cores by allowing all ABI jars to be built in parallel, and then all\nlibrary jars to be built in parallel (up to the available parallelism in the\nbuild environment). Additionally, in environments with network-based caches it\ncan reduce the number of calls to the cache required for each build. Requires\nsome changes to how Java code is written. To migrate, first do some builds in\n",(0,i.mdx)("inlineCode",{parentName:"p"},"migrating_to_source_only")," mode, using\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/fix.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck fix"))," to fix any issues encountered.\nOnce migrated, errors will still be encountered from time to time when new code\ndoes not meet the requirements of this\nmode.",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/fix.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck fix"))," can be used to address\nthese. When building with ",(0,i.mdx)("inlineCode",{parentName:"p"},"source_only"),", using\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/build.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck build")),(0,i.mdx)("inlineCode",{parentName:"p"}," --keep-going")," is\nrecommended since some errors that occur when building an ABI jar will actually\nhave their root cause in another rule that builds later. Read more about\nsource-only ABIs ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/java_abis.html"},"here"),".\n",(0,i.mdx)("inlineCode",{parentName:"p"},"migrating_to_source_only"),": used when migrating from ",(0,i.mdx)("inlineCode",{parentName:"p"},"source")," to ",(0,i.mdx)("inlineCode",{parentName:"p"},"source_only"),".\nActs like ",(0,i.mdx)("inlineCode",{parentName:"p"},"source"),", but issues warnings (in",(0,i.mdx)("inlineCode",{parentName:"p"},"buck.log"),", not to the console) for\nany Java code that would cause errors under",(0,i.mdx)("inlineCode",{parentName:"p"},"source_only"),".\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/fix.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck fix"))," can be used to fix most such\nwarnings."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]abi_generation_mode = source\n")),(0,i.mdx)("h3",{id:"unused_dependencies_action"},"unused_dependencies_action"),(0,i.mdx)("p",null,"Action performed when Buck detects that some dependencies are not used during\nJava compilation. Note that this feature is experimental and does not handle\nrun-time dependencies. The valid values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ignore")," (default): ignore unused dependencies,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"warn"),": emit a warning to the console,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"fail"),": fail the compilation.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]unused_dependencies_action = warn\n")),(0,i.mdx)("h3",{id:"duplicates_log_level"},"duplicates_log_level"),(0,i.mdx)("p",null,"Verbosity of logs emitted on duplicates when building binary. The valid values\nare:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"info")," (default): emit an info to the console,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"warn"),": emit a warning to the console,"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"fine"),": emit a fine info to the console, visible only at high verbosity\nlevels.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[java]duplicates_log_level = info\n")),(0,i.mdx)("h2",{id:"kotlin"},"[kotlin]"),(0,i.mdx)("p",null,"This section configures various aspects of the ",(0,i.mdx)("a",{parentName:"p",href:"https://kotlinlang.org/"},"Kotlin"),"\ntoolchain."),(0,i.mdx)("h3",{id:"kotlinc"},"kotlinc"),(0,i.mdx)("p",null,"The path to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"kotlinc")," compiler executable to use when external compilation\nis forced. This setting has no effect by itself and must be paired with the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#kotlin.external"},(0,i.mdx)("inlineCode",{parentName:"a"},"[kotlin].external")),"\nsetting."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[kotlin]kotlinc = /usr/local/bin/kotlinc\n")),(0,i.mdx)("h3",{id:"external"},"external"),(0,i.mdx)("p",null,"Forces external compilation via ",(0,i.mdx)("inlineCode",{parentName:"p"},"kotlinc"),". When external compilation is forced\nthe following heuristics are used to locate the ",(0,i.mdx)("inlineCode",{parentName:"p"},"kotlinc")," executable:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"If the\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/files-and-dirs/buckconfig.html#kotlin.kotlinc"},(0,i.mdx)("inlineCode",{parentName:"a"},"[kotlin].kotlinc")),"\nsetting is specified, the executable specified by that path will be used."),(0,i.mdx)("li",{parentName:"ul"},"If the\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/files-and-dirs/buckconfig.html#kotlin.kotlin_home"},(0,i.mdx)("inlineCode",{parentName:"a"},"[kotlin].kotlin_home")),"\npath setting is specified, Buck will look for a ",(0,i.mdx)("inlineCode",{parentName:"li"},"bin")," directory under that\npath for an executable named ",(0,i.mdx)("inlineCode",{parentName:"li"},"kotlinc"),"."),(0,i.mdx)("li",{parentName:"ul"},"If a ",(0,i.mdx)("inlineCode",{parentName:"li"},"KOTLIN_HOME")," environment variable is present, Buck will look for a ",(0,i.mdx)("inlineCode",{parentName:"li"},"bin"),"\ndirectory under that path for an executable named ",(0,i.mdx)("inlineCode",{parentName:"li"},"kotlinc"),"."),(0,i.mdx)("li",{parentName:"ul"},"Lastly, if none of the above are specified, Buck will look for the ",(0,i.mdx)("inlineCode",{parentName:"li"},"kotlinc"),"\nexecutable in the paths listed in the ",(0,i.mdx)("inlineCode",{parentName:"li"},"PATH")," environment variable.")),(0,i.mdx)("p",null,"Defaults to ",(0,i.mdx)("inlineCode",{parentName:"p"},"false"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[kotlin]external = true\n")),(0,i.mdx)("h3",{id:"kotlin_home"},"kotlin_home"),(0,i.mdx)("p",null,"The path to the Kotlin root folder, typically the installation folder, where\nvarious Kotlin assets (executables and JAR files) can be found. This path is\nused in the following ways:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"When in-memory compilation is used, the ",(0,i.mdx)("inlineCode",{parentName:"li"},"kotlin-compiler.jar")," and other\nrelated Kotlin JARs required for compilation are located via this path using\nthe following heuristics:",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The root of the directory specified by this path is searched."),(0,i.mdx)("li",{parentName:"ul"},"If there is a ",(0,i.mdx)("inlineCode",{parentName:"li"},"lib")," directory under this path, it is searched."),(0,i.mdx)("li",{parentName:"ul"},"If there is a ",(0,i.mdx)("inlineCode",{parentName:"li"},"libexec")," directory under this path, it is searched."))),(0,i.mdx)("li",{parentName:"ul"},"If external compilation is called for (see\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/files-and-dirs/buckconfig.html#kotlin.external"},(0,i.mdx)("inlineCode",{parentName:"a"},"[kotlin].external")),"),\na ",(0,i.mdx)("inlineCode",{parentName:"li"},"bin")," directory under this directory will be searched to locate the\n",(0,i.mdx)("inlineCode",{parentName:"li"},"kotlinc")," executable.")),(0,i.mdx)("p",null,"If this setting is not specified, the location of the Kotlin home directory can\nbe specified via the ",(0,i.mdx)("inlineCode",{parentName:"p"},"KOTLIN_HOME")," environment variable. If neither the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#kotlin.kotlin_home"},(0,i.mdx)("inlineCode",{parentName:"a"},"[kotlin].kotlin_home")),"\nsetting nor the ",(0,i.mdx)("inlineCode",{parentName:"p"},"KOTLIN_HOME")," environment variable is specified, Buck will\nattempt to locate the home directory by searching for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"kotlinc")," executable\nin the paths specified by the ",(0,i.mdx)("inlineCode",{parentName:"p"},"PATH")," environment variable. If the ",(0,i.mdx)("inlineCode",{parentName:"p"},"kotlinc"),"\nexecutable is found, Buck assumes that the ",(0,i.mdx)("em",{parentName:"p"},"parent directory")," of that executable\nis the Kotlin home."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[kotlin]kotlin_home = /usr/local/Cellar/kotlin/1.1.1\n")),(0,i.mdx)("h2",{id:"log"},"[log]"),(0,i.mdx)("p",null,"This section controls how Buck will log information about builds for later\ninspection. Settings in this section will appear as features are in the\nprocessing of being deprecated, and be removed after features are removed from\nBuck."),(0,i.mdx)("h3",{id:"max_traces"},"max_traces"),(0,i.mdx)("p",null,"Sets the maximum number of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/about/performance_tuning.html"},"Chrome Traces")," that Buck will\ncreate."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[log]max_traces = 25\n")),(0,i.mdx)("h3",{id:"compress_traces"},"compress_traces"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"true")," if Buck should GZIP the traces, false otherwise."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[log]compress_traces = true\n")),(0,i.mdx)("h3",{id:"machine_readable_logger_enabled"},"machine_readable_logger_enabled"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"true")," if Buck should output to a machine readable log file under name\n",(0,i.mdx)("inlineCode",{parentName:"p"},"buck-machine-log"),". Log entries are formatted one per line like\n",(0,i.mdx)("inlineCode",{parentName:"p"},"< Event type >< space >< JSON >"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[log]machine_readable_logger_enabled = true\n")),(0,i.mdx)("h3",{id:"build_details_template"},"build_details_template"),(0,i.mdx)("p",null,"If provided, Buck prints the specified string at the end of each build. The\nstring ",(0,i.mdx)("inlineCode",{parentName:"p"},"{build_id}")," is replaced with the current build ID. This can be helpful\nto link to external systems that may have more details about the build."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'[log]build_details_template = "Details at https://example.com/builds/{build_id}"\n')),(0,i.mdx)("h3",{id:"build_details_commands"},"build_details_commands"),(0,i.mdx)("p",null,"If\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#log.build_details_template"},(0,i.mdx)("inlineCode",{parentName:"a"},"build_details_template")),"\nis provided, Buck prints the specified string to the console for each of the\nspecified list of commands. This can be useful for ensuring that users do not\nhave too much information provided, but allows configuring log-heavy\nenvironments like CI systems to output more information for commands like\n'query'. Default value is build, test, install"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[log]build_details_commands = build, test, install, query, targets\n")),(0,i.mdx)("h2",{id:"lua"},"[lua]"),(0,i.mdx)("p",null,"This section defines settings relevant to ",(0,i.mdx)("inlineCode",{parentName:"p"},"lua_*")," rules."),(0,i.mdx)("h3",{id:"lua-1"},"lua"),(0,i.mdx)("p",null,"The path to the Lua interpreter. By default, Buck will search for the binary\n",(0,i.mdx)("inlineCode",{parentName:"p"},"lua")," in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"PATH"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[lua]lua = /usr/bin/lua\n")),(0,i.mdx)("h3",{id:"cxx_library"},"cxx_library"),(0,i.mdx)("p",null,"The build target of the Lua C library to use to link a standalone interpreter.\nBy default, Buck will use ",(0,i.mdx)("inlineCode",{parentName:"p"},"-llua")," from the C/C++ linker's default library search\npath."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[lua]cxx_library = //third-party/lua:lua\n")),(0,i.mdx)("h3",{id:"starter_type"},"starter_type"),(0,i.mdx)("p",null,"The method for bootstrapping Lua binaries. By default, ",(0,i.mdx)("inlineCode",{parentName:"p"},"native")," is chosen if the\nbinary contains native libraries and ",(0,i.mdx)("inlineCode",{parentName:"p"},"pure")," is chosen otherwise."),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"pure"),": The binary bootstrap process uses pure Lua code. This method cannot be\nused if the binary includes native code."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"native"),": The binary bootstrap process links in the Lua C library (specified\nin\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/files-and-dirs/buckconfig.html#lua.cxx_library"},(0,i.mdx)("inlineCode",{parentName:"a"},"[lua].cxx_library")),")\nto form a standalone native interpreter.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[lua]starter_type = pure\n")),(0,i.mdx)("h3",{id:"native_starter_library"},"native_starter_library"),(0,i.mdx)("p",null,"A C/C++ library to use as a custom starter for Lua binaries which use\nthe",(0,i.mdx)("inlineCode",{parentName:"p"},"NATIVE")," bootstrap method. The library is expected to define the following\nfunction:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'#ifdef __cplusplusextern "C"#endifint run_starter(int argc,const char **argv,const char *main_module,const char *modules_dir,const char *extension_suffix);\n')),(0,i.mdx)("p",null,"Where the arguments are as follows:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"argc"),": The number of command-line arguments."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"argv"),": The array of command-line arguments."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"main_module"),": The name of the binary's main module."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"modules_dir"),": The path, relative the binary, to the modules directory."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"extension_suffix"),": The suffix used for native libraries (e.g. ",(0,i.mdx)("inlineCode",{parentName:"li"},".so"),").")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[lua]native_starter_library = //third-party/lua:starter\n")),(0,i.mdx)("h3",{id:"extension"},"extension"),(0,i.mdx)("p",null,"The extension to use for Lua binaries. Defaults to ",(0,i.mdx)("inlineCode",{parentName:"p"},".lex"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[lua]extension = .lex\n")),(0,i.mdx)("h2",{id:"maven_repositories"},"[maven_repositories]"),(0,i.mdx)("p",null,"This section defines the set of maven repositories that Buck can use when\nattempting to resolve maven artifacts. It takes the form of key value pairs of a\nshort name for the repo and the URL. The URL may either be an HTTP(S) URL, or\npoint to a directory on your local disk."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[maven_repositories]central = https://repo1.maven.org/maven2\n  m2 = ~/.m2/repository\n")),(0,i.mdx)("p",null,"Note that if you are using Buck to talk to Maven and you are using IPv6, you\nmight need to\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckjavaargs.html"},"add the following option to your ",(0,i.mdx)("inlineCode",{parentName:"a"},".buckjavaargs")," file"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"-Djava.net.preferIPv6Addresses=true\n")),(0,i.mdx)("h2",{id:"ndk"},"[ndk]"),(0,i.mdx)("p",null,"This section defines properties to configure building native code against the\nAndroid NDK."),(0,i.mdx)("h3",{id:"ndk_version"},"ndk_version"),(0,i.mdx)("p",null,"The version of the NDK that Buck should use to build native code. Buck searches\nfor this version in the subdirectories beneath the directory specified by either\nthe ",(0,i.mdx)("inlineCode",{parentName:"p"},"ANDROID_NDK_REPOSITORY")," environment variable or the value of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ndk.ndk_repository_path"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ndk].ndk_repository_path")),"\nproperty. Buck prefers an exact match, and otherwise accepts a prefix match.\nNDKs with a version prior to ",(0,i.mdx)("inlineCode",{parentName:"p"},"r11")," store their version in the file\n",(0,i.mdx)("inlineCode",{parentName:"p"},"RELEASE.TXT"),". For example, in version r10c this file contains ",(0,i.mdx)("inlineCode",{parentName:"p"},"r10c (64-bit)"),".\nIn this case, you would use ",(0,i.mdx)("inlineCode",{parentName:"p"},"r10c")," for the value of ",(0,i.mdx)("inlineCode",{parentName:"p"},"ndk_version"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]\n  ndk_version = r10c\n")),(0,i.mdx)("p",null,"NDKs with a version after ",(0,i.mdx)("inlineCode",{parentName:"p"},"r11")," use a different format for their version and\nstore their version in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Pkg.Revision")," property of the file\n",(0,i.mdx)("inlineCode",{parentName:"p"},"source.properties"),". For example, this is the content of that file for version\nr13b:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"Pkg.Desc = Android NDKPkg.Revision = 13.1.3345770\n")),(0,i.mdx)("p",null,"In this case, you would use ",(0,i.mdx)("inlineCode",{parentName:"p"},"13.1.3345770")," for the value of ",(0,i.mdx)("inlineCode",{parentName:"p"},"ndk_version"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]\n  ndk_version = 13.1.3345770\n")),(0,i.mdx)("h3",{id:"ndk_path"},"ndk_path"),(0,i.mdx)("p",null,"This specifies an absolute path to the Android NDK. The default is empty.\nSetting this property has the same effect as if you had set either of the\nfollowing environment variables to the same value:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ANDROID_NDK")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"NDK_HOME"))),(0,i.mdx)("p",null,"Note that Buck gives precedence to the values of these environment variables\u2014in\nthe order in which they are listed above\u2014over the value of this property in\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]ndk_path = /Library/Android/ndk/r10c\n")),(0,i.mdx)("h3",{id:"ndk_repository_path"},"ndk_repository_path"),(0,i.mdx)("p",null,"This specifies the absolute path to a directory that contains multiple versions\nof the Android NDK in subdirectories. The default is empty. Setting this\nproperty has the same effect as if you had set the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ANDROID_NDK_REPOSITORY"),"\nenvironment variable to the same value. However, Buck gives precedence to the\nvalue of this environment variables over the value of this property\nin",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". Buck selects which NDK to use based on the value of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ndk.ndk_version"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ndk].ndk_version")),"\nproperty. Currently, if you do not specify a value for ",(0,i.mdx)("inlineCode",{parentName:"p"},"ndk.ndk_version"),", Buck\nselects the most-recent NDK. However, you should not rely on this behavior as it\ncould change in a future release."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]ndk_repository_path = /Library/Android/ndk\n")),(0,i.mdx)("h3",{id:"app_platform"},"app_platform"),(0,i.mdx)("p",null,"The android platform libraries that the code is targeting. This is equivalent to\nthe ",(0,i.mdx)("inlineCode",{parentName:"p"},"APP_TARGET")," in the NDK build system. The default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"android-16"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]app_platform = android-21\n")),(0,i.mdx)("h3",{id:"app_platform_per_cpu_abi"},"app_platform_per_cpu_abi"),(0,i.mdx)("p",null,"The android platform libraries that the code is targeting, set on a per-CPU ABI\nbasis. This is equivalent to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"APP_TARGET")," in the NDK build system. If no\nvalue is set for a particular CPU ABI, the value from\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ndk.app_platform"},(0,i.mdx)("inlineCode",{parentName:"a"},"app_platform")),"\nis used as a fallback."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]app_platform_per_cpu_abi = arm => android-19, arm64 => android-22\n")),(0,i.mdx)("h3",{id:"cpu_abis"},"cpu_abis"),(0,i.mdx)("p",null,"A comma separated list of the CPU ABIs that this repo supports. Buck will only\nbuild NDK code for these ABIs."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]cpu_abis = armv7, x86\n")),(0,i.mdx)("h3",{id:"compiler-2"},"compiler"),(0,i.mdx)("p",null,"When compiling ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," rules,\nthis specifies the compiler family to use from the NDK. The possible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"gcc")," (default): Use the GCC family of compilation tools."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"clang"),": Use the Clang family of compilation tools.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]compiler = gcc\n")),(0,i.mdx)("h3",{id:"gcc_version"},"gcc_version"),(0,i.mdx)("p",null,"When compiling ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," rules,\nthis specifies the version of GCC to use. This will be used regardless of the\nvalue in\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ndk.compiler"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ndk].compiler")),",\nas other compiler families still use tools from the GCC toolchain (such as\n",(0,i.mdx)("inlineCode",{parentName:"p"},"ar"),"). The default value is ",(0,i.mdx)("inlineCode",{parentName:"p"},"4.8"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]gcc_version = 4.8\n")),(0,i.mdx)("h3",{id:"clang_version"},"clang_version"),(0,i.mdx)("p",null,"When compiling ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," rules,\nthis specifies the version of Clang to use. The default value is ",(0,i.mdx)("inlineCode",{parentName:"p"},"3.4"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]clang_version = 3.4\n")),(0,i.mdx)("h3",{id:"cxx_runtime"},"cxx_runtime"),(0,i.mdx)("p",null,"When compiling ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," rules,\nthis specifies the variant of the\n",(0,i.mdx)("a",{parentName:"p",href:"http://www.kandroid.org/ndk/docs/CPLUSPLUS-SUPPORT.html"},"C/C++ runtime")," to use.\nPossible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"gabixx")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"gnustl")," (default)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"libcxx")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"stlport")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"system"))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]cxx_runtime = gnustl\n")),(0,i.mdx)("h3",{id:"cxx_runtime_type"},"cxx_runtime_type"),(0,i.mdx)("p",null,"When compiling ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library"))," rules,\nthis specifies how libraries are intended to be linked with the runtime. If this\nis ",(0,i.mdx)("inlineCode",{parentName:"p"},"static"),", then the C/C++ runtime library will not be packaged in the APK.\nPossible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"dynamic")," (default)"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"static"))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ndk]cxx_runtime_type = dynamic\n")),(0,i.mdx)("h2",{id:"ocaml"},"[ocaml]"),(0,i.mdx)("p",null,"This section configures the paths to the OCaml toolchain's binaries."),(0,i.mdx)("h3",{id:"ocamlbytecodecompiler"},"ocaml.bytecode.compiler"),(0,i.mdx)("p",null,"The path to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/native.html"},"OCaml bytecode compiler (ocamlc)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]ocaml.bytecode.compiler = /usr/local/bin/ocamlc.opt\n")),(0,i.mdx)("h3",{id:"ocamlcompiler"},"ocaml.compiler"),(0,i.mdx)("p",null,"The path to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/comp.html"},"OCaml native-code compiler (ocamlopt)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]ocaml.compiler = /usr/local/bin/ocamlopt.opt\n")),(0,i.mdx)("h3",{id:"deptool"},"dep.tool"),(0,i.mdx)("p",null,"The path to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/depend.html"},"OCaml dependency generator (ocamldep)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]dep.tool = /usr/local/bin/ocamldep.opt\n")),(0,i.mdx)("h3",{id:"lexcompiler"},"lex.compiler"),(0,i.mdx)("p",null,"The path to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html#sec296"},"OCaml lexer generator (ocamllex)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]lex.compiler = /usr/local/bin/ocamllex.opt\n")),(0,i.mdx)("h3",{id:"yacccompiler"},"yacc.compiler"),(0,i.mdx)("p",null,"The path to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html#sec307"},"OCaml parser generator (ocamlyacc)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]yacc.compiler = /usr/local/bin/ocamlyacc\n")),(0,i.mdx)("h3",{id:"debug"},"debug"),(0,i.mdx)("p",null,"The path to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/debugger.html"},"OCaml debugger (ocamldebug)"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]debug = /usr/local/bin/ocamldebug\n")),(0,i.mdx)("h3",{id:"interopincludes"},"interop.includes"),(0,i.mdx)("p",null,"The path to the OCaml standard library directory (see\n",(0,i.mdx)("a",{parentName:"p",href:"https://caml.inria.fr/pub/docs/manual-ocaml/intfc.html"},"Interfacing C with OCaml"),")."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ocaml]interop.includes = /usr/local/lib/ocaml\n")),(0,i.mdx)("h2",{id:"parser"},"[parser]"),(0,i.mdx)("p",null,"This section defines settings for the BUCK parser."),(0,i.mdx)("h3",{id:"python_interpreter"},"python_interpreter"),(0,i.mdx)("p",null,"The path to the python interpreter to use for parsing. If not specified, the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#python.interpreter"},(0,i.mdx)("inlineCode",{parentName:"a"},"[python].interpreter")),"\nsetting is used."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[parser]python_interpreter = /usr/bin/python\n")),(0,i.mdx)("h3",{id:"python_path"},"python_path"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"PYTHONPATH")," environment variable set for the python interpreter used by the\nparser to use. By default, this is unset."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[parser]python_path = /path1:/path2\n")),(0,i.mdx)("h3",{id:"polyglot_parsing_enabled"},"polyglot_parsing_enabled"),(0,i.mdx)("p",null,"Indicates whether support for experimental polyglot parsing should be enabled.\nWhen enabled, build file can have a ",(0,i.mdx)("inlineCode",{parentName:"p"},"# BUILD FILE SYNTAX: "),"marker followed by\none of supported syntax names that include ",(0,i.mdx)("inlineCode",{parentName:"p"},"PYTHON_DSL")," and an experimental\n",(0,i.mdx)("inlineCode",{parentName:"p"},"SKYLARK"),". This flag is disabled by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[parser]polyglot_parsing_enabled = true\n")),(0,i.mdx)("h3",{id:"default_build_file_syntax"},"default_build_file_syntax"),(0,i.mdx)("p",null,"Specifies the default syntax assumed when parsing build files without explicit\nbuild syntax marker (",(0,i.mdx)("inlineCode",{parentName:"p"},"# BUILD FILE SYNTAX: "),"). This flag is only applicable\nwhen",(0,i.mdx)("inlineCode",{parentName:"p"},"parser.polyglot_parsing_enabled")," configuration is set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"true"),". By default\nit's value is set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"PYTHON_DSL"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[parser]default_build_file_syntax = SKYLARK\n")),(0,i.mdx)("h3",{id:"disable_implicit_native_rules"},"disable_implicit_native_rules"),(0,i.mdx)("p",null,"If set, native rules (",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library")),",\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/android_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"android_library")),", etc) cannot\nbe used in BUCK files. This can be useful if your team has a common set of\nmacros that should be loaded, and one desires a fast-feedback way to make sure\nthat Buck's native rules are not inadvertently used. If set, native rules can\nonly be accessed via the 'native' object within an extension file that is\nevaluated with ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/function/load.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"load()"))," or\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/function/include_defs.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"include_defs()")),". This flag is\ndisabled by default (native rules can be used in build files)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[parser]disable_implicit_native_rules = true\n")),(0,i.mdx)("h3",{id:"warn_about_deprecated_syntax"},"warn_about_deprecated_syntax"),(0,i.mdx)("p",null,"If set, warnings about deprecated syntax in BUCK files will be issued. This flag\nis enabled by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[parser]warn_about_deprecated_syntax = false\n")),(0,i.mdx)("h2",{id:"project"},"[project]"),(0,i.mdx)("p",null,"This section defines project-level settings."),(0,i.mdx)("h3",{id:"generate_android_manifest"},"generate_android_manifest"),(0,i.mdx)("p",null,'Forces Buck to generate "AndroidManifest.xml" files for Android IntelliJ\nmodules. The generated manifests contain package name only to allow Android\nIntelliJ plugin resolve references to resources correctly. Manifests are\ngenerated for modules that have information about package name and have either\nnone or more than one targets with Android manifests. When a module has exactly\none target with Android manifest this manifest is used as a manifest in the\nmodule.'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]generate_android_manifest = true\n")),(0,i.mdx)("h3",{id:"ide"},"ide"),(0,i.mdx)("p",null,"Buck attempts to figure out the correct IDE to use based on the type of rule\n(e.g. for ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/apple_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"apple_library"))," it will\ngenerate Xcode workspace), but for cross-platform libraries (like\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"cxx_library")),") it is not possible.\nThis setting lets you specify the default IDE that\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/project.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck project"))," generates. Possible\nvalues are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"intellij")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"xcode"))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]ide = xcode\n")),(0,i.mdx)("h3",{id:"glob_handler"},"glob_handler"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/function/glob.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"glob()"))," handler that Buck will\nuse. The possible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"python")," (default): evaluates globs in the Python interpreter while parsing\n",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_file.html"},"build file"),"s."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"watchman"),": evaluates the globs with\n",(0,i.mdx)("a",{parentName:"li",href:"https://facebook.github.io/watchman/"},"Watchman"),", which is generally much\nfaster.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]glob_handler = python\n")),(0,i.mdx)("h3",{id:"allow_symlinks"},"allow_symlinks"),(0,i.mdx)("p",null,"If set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"forbid"),", Buck will disallow symbolic links to source and ",(0,i.mdx)("inlineCode",{parentName:"p"},"BUCK"),"\nfiles. This allows Buck to enable a number of performance improvements. If set\nto ",(0,i.mdx)("inlineCode",{parentName:"p"},"allow"),", Buck will silently ignore symlinks. The default value is ",(0,i.mdx)("inlineCode",{parentName:"p"},"warn"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]allow_symlinks = forbid\n")),(0,i.mdx)("h3",{id:"build_file_search_method"},"build_file_search_method"),(0,i.mdx)("p",null,"How Buck finds ",(0,i.mdx)("inlineCode",{parentName:"p"},"BUCK")," files. This is used when a\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target_pattern.html"},"build target pattern contains ",(0,i.mdx)("inlineCode",{parentName:"a"},"/...")),"\nand for commands like ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/project.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck project")),".\nPossible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"filesystem_crawl")," (default): walk the file system recursively using APIs\nprovided by the operating system."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"watchman"),": query ",(0,i.mdx)("a",{parentName:"li",href:"https://facebook.github.io/watchman/"},"Watchman")," with a glob\nquery like ",(0,i.mdx)("inlineCode",{parentName:"li"},"**/BUCK"),". For file systems such as EdenFS, ",(0,i.mdx)("inlineCode",{parentName:"li"},"watchman")," can be\nfaster than ",(0,i.mdx)("inlineCode",{parentName:"li"},"filesystem_crawl"),".")),(0,i.mdx)("p",null,"This setting in independent of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#project.glob_handler"},(0,i.mdx)("inlineCode",{parentName:"a"},"[project].glob_handler")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]build_file_search_method = filesystem_crawl\n")),(0,i.mdx)("h3",{id:"watchman_query_timeout_ms"},"watchman_query_timeout_ms"),(0,i.mdx)("p",null,"When communicating with ",(0,i.mdx)("a",{parentName:"p",href:"https://facebook.github.io/watchman/"},"Watchman"),", Buck\nwill wait this long for a response. The default is ",(0,i.mdx)("inlineCode",{parentName:"p"},"60000")," ms."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]watchman_query_timeout_ms = 60000\n")),(0,i.mdx)("h3",{id:"ide_force_kill"},"ide_force_kill"),(0,i.mdx)("p",null,"Configures how the ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck project")," command responds if an instance of Apple's\nXcode IDE is running."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]ide_force_kill = never\n")),(0,i.mdx)("p",null,"Possible values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"always")," : Always terminate Xcode. Do not ask first."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"never")," : Never terminate Xcode."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"prompt")," : Ask the user whether to terminate Xcode. This is the default.")),(0,i.mdx)("p",null,"To specify that Buck should respond in a way that is different than the\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," setting, use the",(0,i.mdx)("inlineCode",{parentName:"p"},"--config")," command-line option."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"buck project --config project.ide_force_kill=always\n")),(0,i.mdx)("p",null,"For more information about the ",(0,i.mdx)("inlineCode",{parentName:"p"},"--config")," option, see the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/common_parameters.html"},(0,i.mdx)("strong",{parentName:"a"},"Common Parameters")),"\ntopic."),(0,i.mdx)("h3",{id:"initial_targets"},"initial_targets"),(0,i.mdx)("p",null,"A space-separated list of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target"),"s to run when\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/project.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck project"))," is executed. This is\noften a list of ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/genrule.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"genrule")),"s whose outputs\nneed to exist in order for an IDE to be able to build a project without the help\nof Buck."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]initial_targets = //java/com/facebook/schema:generate_thrift_jar\n")),(0,i.mdx)("h3",{id:"ignore"},"ignore"),(0,i.mdx)("p",null,"A comma-separated list of subtrees within the project root which are ignored in\nthe following contexts:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Buck daemon filesystem monitoring."),(0,i.mdx)("li",{parentName:"ul"},"Filesystem traversal when searching for tests and BUCK files"),(0,i.mdx)("li",{parentName:"ul"},"IntelliJ project indexing")),(0,i.mdx)("p",null,"Buck automatically excludes its own output, e.g. ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck-out"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckd"),", and\n",(0,i.mdx)("inlineCode",{parentName:"p"},".idea"),", as well as the cache directory (see\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#cache.mode"},(0,i.mdx)("inlineCode",{parentName:"a"},"[cache].mode")),"),\nbut it makes no assumptions about source control systems."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]ignore = .git\n")),(0,i.mdx)("h3",{id:"pre_process"},"pre_process"),(0,i.mdx)("p",null,"A script that should be executed before the project files are generated. This\nshould only be used to do some project-specific actions that are reasonably\nfast. The environment of this script contains the following variables:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BUCK_PROJECT_TARGETS")," - whitespace-separated list of input targets."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BUCK_PROJECT_TYPE"),' - the type of a project, can be "xcode" or "intellij".')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]pre_process = scripts/pre_process_buck_project.py\n")),(0,i.mdx)("h3",{id:"post_process"},"post_process"),(0,i.mdx)("p",null,"A script that should be executed after the project files are generated. This\nshould only be used to do some project-specific actions that are reasonably\nfast. The environment of this script contains the following variables:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BUCK_PROJECT_TARGETS")," - whitespace-separated list of input targets."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"BUCK_PROJECT_TYPE"),' - the type of a project, can be "xcode" or "intellij".')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]post_process = scripts/post_process_buck_project.py\n")),(0,i.mdx)("h3",{id:"parallel_parsing"},"parallel_parsing"),(0,i.mdx)("p",null,"When set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"true"),", Buck will parse your\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_file.html"},"build file"),"s in parallel."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]parallel_parsing = false\n")),(0,i.mdx)("h3",{id:"parsing_threads"},"parsing_threads"),(0,i.mdx)("p",null,"When\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#project.parallel_parsing"},(0,i.mdx)("inlineCode",{parentName:"a"},"[project].parallel_parsing")),"\nis enabled, this specifies the number of threads Buck uses to parse. By default,\nthis is equal to the number of threads Buck uses to build, and will be the\nminimum of this setting and\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#build.threads"},(0,i.mdx)("inlineCode",{parentName:"a"},"[build].threads")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]parsing_threads = 2\n")),(0,i.mdx)("h3",{id:"build_file_import_whitelist"},"build_file_import_whitelist"),(0,i.mdx)("p",null,"A comma-separated list that configures which Python modules can be imported in\nbuild files."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]build_file_import_whitelist = math, Foo\n")),(0,i.mdx)("h3",{id:"shared_libraries_in_bundles"},"shared_libraries_in_bundles"),(0,i.mdx)("p",null,"When using xcode project, for projects that depend on a library, if set to\n",(0,i.mdx)("inlineCode",{parentName:"p"},"'true'"),", if that library is the 'binary' of a bundle, the bundle will replace\nthe library in the Xcode linking phase"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[project]shared_libraries_in_bundles = false\n")),(0,i.mdx)("h3",{id:"motd"},"motd"),(0,i.mdx)("p",null,"A plain text message that will be printed first when a user interacts with buck.\nThis supports simple special characters like newlines (\\n)."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'[project]motd = "DO NOT BREAK THE BUILD"\n')),(0,i.mdx)("h2",{id:"python"},"[python]"),(0,i.mdx)("p",null,"This section defines settings relevant to ",(0,i.mdx)("inlineCode",{parentName:"p"},"python_*")," rules."),(0,i.mdx)("h4",{id:"python-platform-flavors-in-buckconfig"},"Python platform flavors in ",(0,i.mdx)("inlineCode",{parentName:"h4"},".buckconfig")),(0,i.mdx)("p",null,"Buck enables you to create additional platform ",(0,i.mdx)("em",{parentName:"p"},"flavors")," for Python in\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". A platform flavor groups together a set of configuration\nparameters, which you can then reference at build time. To create a new Python\nplatform flavor, add a section with the header"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python#**flavor**]\n")),(0,i.mdx)("p",null,"to ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". If you invoke Buck with the specified ",(0,i.mdx)("em",{parentName:"p"},"flavor")," appended to the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target"),", Buck uses the\nvalues in this section instead of those in ",(0,i.mdx)("inlineCode",{parentName:"p"},"[python]"),". For example, to build\nwith the values in ",(0,i.mdx)("inlineCode",{parentName:"p"},"[python#py3]")," instead of ",(0,i.mdx)("inlineCode",{parentName:"p"},"[python]"),", you could invoke Buck\nusing the following command:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"$ buck build app#py3\n")),(0,i.mdx)("p",null,"This is useful if, for example, you have both Python 2 and Python 3 code in your\nproject and need to differentiate between them by changing the value of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#python.interpreter"},(0,i.mdx)("inlineCode",{parentName:"a"},"[python].interpreter")),".\nYou can also use these platform flavors, in the ",(0,i.mdx)("inlineCode",{parentName:"p"},"platform")," argument of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/python_binary.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"python_binary"))," rule, and in the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"platform_sources")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"platform_resources")," arguments of the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/python_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"python_library"))," rule."),(0,i.mdx)("h3",{id:"interpreter"},"interpreter"),(0,i.mdx)("p",null,"The path to the python interpreter to use. By default, Buck will search for this\nin your ",(0,i.mdx)("inlineCode",{parentName:"p"},"PATH"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]interpreter = /usr/bin/python\n")),(0,i.mdx)("h3",{id:"inplace_interpreter_flags"},"inplace_interpreter_flags"),(0,i.mdx)("p",null,"Flags to pass to the python interpreter when running a .pex file that is\nconfigured to run 'inplace'. Defaults to ",(0,i.mdx)("inlineCode",{parentName:"p"},"-Es")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]inplace_interpreter_flags = -EBs\n")),(0,i.mdx)("h3",{id:"library"},"library"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_rule.html"},"build rule"),", typically a\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/prebuilt_cxx_library.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"prebuilt_cxx_library")),",\nwrapping the ",(0,i.mdx)("inlineCode",{parentName:"p"},"libpython.so")," that ",(0,i.mdx)("inlineCode",{parentName:"p"},"cpp_python_extension")," rules should build\nagainst."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]library = //third-party/python:python\n")),(0,i.mdx)("h3",{id:"native_link_strategy"},"native_link_strategy"),(0,i.mdx)("p",null,"The strategy used for pulling in native dependencies:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"merged"),": Native dependencies which are first-order dependencies of ",(0,i.mdx)("inlineCode",{parentName:"li"},"python_*"),"\nrules are linked as full, separate, shared libraries. Transitive native\ndependencies are statically linked into a single monolithic shared library.\nThis is preferred to reduce the native code size and shared library count."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"separate")," (default): Transitive native dependencies are linked as full,\nseparate, shared libraries. This is preferred for faster build-time speed.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]native_link_strategy = separate\n")),(0,i.mdx)("h3",{id:"package_style"},"package_style"),(0,i.mdx)("p",null,"The packaging style to use for\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/python_binary.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"python_binary"))," and\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/rule/python_test.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"python_test")),". Valid values are:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"inplace"),": builds executables which are only able to run from within the\nrepository. This style of packaging is significantly faster than ",(0,i.mdx)("inlineCode",{parentName:"li"},"standalone"),"\npackages."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"standalone")," (default): builds self-contained executable packages that can be\nrun outside of the repository.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]package_style = standalone\n")),(0,i.mdx)("h3",{id:"path_to_pex_executor"},"path_to_pex_executor"),(0,i.mdx)("p",null,"The path to the tool used to run executable Python packages. For self-executing\npackages, this should just by the shell."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]path_to_pex_executor = /bin/sh\n")),(0,i.mdx)("h3",{id:"pex_extension"},"pex_extension"),(0,i.mdx)("p",null,"The extension to use for executable Python packages."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]pex_extension = .pex\n")),(0,i.mdx)("h3",{id:"version"},"version"),(0,i.mdx)("p",null,"The implementation and version of the Python interpreter. The syntax is:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"<interpreter implementation> <interpreter version>\n")),(0,i.mdx)("p",null,"The implementation and version should be separated by a space. The version\nshould comprise only numerals and periods; it should not contain characters such\nas ",(0,i.mdx)("inlineCode",{parentName:"p"},"+"),", although some Python versions use such characters. To obtain the\nimplementation, you can use the following command, invoked using the relevant\nPython interpreter:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'python -c "import platform; print( platform.python_implementation() )"\n')),(0,i.mdx)("p",null,"Similarly, to obtain the version, use:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'python -c "import platform; print( platform.python_version() )"\n')),(0,i.mdx)("p",null,"Example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[python]version = CPython 2.7\n")),(0,i.mdx)("h2",{id:"repositories"},"[repositories]"),(0,i.mdx)("p",null,"Lists the cells that constitute the Buck project. Buck builds that are part of\nthis project\u2014that is, which use this ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig"),"\u2014can access the cells\nspecified in this section."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[repositories]\n    buck = .\n    bazel_skylib = ./third-party/skylark/bazel-skylib\n")),(0,i.mdx)("p",null,"The string on the left-hand side of the equals sign is the ",(0,i.mdx)("em",{parentName:"p"},"alias")," for the cell.\nThe string on the right-hand side of the equals sign is the path to the cell\nfrom the directory that contains this ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file. It is not necessary to\ninclude the current cell in this section, but we consider it a best practice to\ndo so:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"buck = .\n")),(0,i.mdx)("p",null,"You can view the contents of this section using the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/audit.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck audit cell"))," command. Although the\nname of the section is ",(0,i.mdx)("em",{parentName:"p"},"repositories"),", the section actually lists ",(0,i.mdx)("em",{parentName:"p"},"cells"),". In\npractice, Buck cells often correspond to repositories, but this is not a\nrequirement. For more information about the relationship between Buck projects,\ncells, and repositories, see the\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/about/overview.html"},"Key Concepts")," topic."),(0,i.mdx)("h2",{id:"resources"},"[resources]"),(0,i.mdx)("p",null,"The settings to control how Buck uses resources to schedule the work. When\nresource-aware scheduler is enabled, Buck will create more threads in attempt to\nrun resource-independent work in parallel. Number of build threads is still\ncontrolled by ",(0,i.mdx)("inlineCode",{parentName:"p"},"num_threads")," option. Buck will also create a number of additional\nthreads that will be used for tasks that don't require CPU: network fetches,\ndisk operations, etc. Total number of threads that Buck will operate is\ncontrolled by",(0,i.mdx)("inlineCode",{parentName:"p"},"managed_thread_count")," option, that is, it includes build threads\nand additional threads."),(0,i.mdx)("h3",{id:"resource_aware_scheduling_enabled"},"resource_aware_scheduling_enabled"),(0,i.mdx)("p",null,"When set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"true"),", Buck will attempt to use resource-aware scheduler."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]resource_aware_scheduling_enabled = true\n")),(0,i.mdx)("h3",{id:"managed_thread_count"},"managed_thread_count"),(0,i.mdx)("p",null,"Buck will use ",(0,i.mdx)("inlineCode",{parentName:"p"},"num_threads")," threads for CPU intensive tasks (e.g. local\nbuilding) and it will use ",(0,i.mdx)("inlineCode",{parentName:"p"},"managed_thread_count - num_threads"),"for other\npurposes. Thus, ",(0,i.mdx)("inlineCode",{parentName:"p"},"managed_thread_count")," value must be greater or equal to\n",(0,i.mdx)("inlineCode",{parentName:"p"},"num_threads")," value. If you don't specify this value, Buck will create built-in\nnumber of additional threads which equals to the number of CPU cores on the\nmachine. These additional threads will be used for non-CPU work like networking,\ndisk I/O and etc. But if one of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"num_threads")," threads is free then Buck will\nprobably use it for non-CPU stuff as well."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]managed_thread_count = 40\n")),(0,i.mdx)("h3",{id:"default_cpu_amount"},"default_cpu_amount"),(0,i.mdx)("p",null,"Amount of CPU resource required by arbitrary job which has no specific setting\nfor its resource amounts. By default is 1 - a single CPU is required for the job\nto be completed."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]default_cpu_amount = 1\n")),(0,i.mdx)("h3",{id:"default_memory_amount"},"default_memory_amount"),(0,i.mdx)("p",null,"Amount of memory resource required by arbitrary job which has no specific\nsetting for its resource amounts. By default is 1 - a single memory resource is\nrequired for the job to be completed. A single memory resource is an abstract\nvalue, currently it equals to 100 Mb."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]default_memory_amount = 1\n")),(0,i.mdx)("h3",{id:"default_disk_io_amount"},"default_disk_io_amount"),(0,i.mdx)("p",null,"Amount of disk I/O resource required by arbitrary job which has no specific\nsetting for its resource amounts. A single disk resource is an abstract value.\nThink about it as like SSD can handle 50 parallel disk jobs with weight 1, while\nHDD can handle only 20. Thus, if job needs to read or write a lot of data, it is\nbetter to assign a higher value for its disk I/O amount. This will reduce the\nrisk to have several similar jobs running concurrently and performing huge disk\nI/O operations, slowing down build itself and system performance."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]default_disk_io_amount = 1\n")),(0,i.mdx)("h3",{id:"default_network_io_amount"},"default_network_io_amount"),(0,i.mdx)("p",null,"A single network resource is an abstract value. Think about it as Ethernet can\nhandle 50 parallel network jobs with weight 1. Slower network interfaces can\nhandle less amount of jobs. If job needs to send or receive a lot of data, it is\nbetter to assign a higher value for its network I/O amount."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]default_network_io_amount = 1\n")),(0,i.mdx)("h3",{id:"max_memory_resource"},"max_memory_resource"),(0,i.mdx)("p",null,"Maximum memory resource available to Buck. By default is size of Java heap\ndivided by 100 Mb. A single memory resource is an abstract value, currently it\nequals to 100 Mb."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]max_memory_resource = 30\n")),(0,i.mdx)("h3",{id:"max_disk_io_resource"},"max_disk_io_resource"),(0,i.mdx)("p",null,"Maximum disk I/O resource available to Buck. By default the value is 50. Think\nabout it as like SSD can handle 50 parallel disk jobs with weight 1, while HDD\ncan handle only 20. Thus, if job needs to read or write a lot of data, it should\nrequire higher disk I/O resource."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]max_disk_io_resource = 30\n")),(0,i.mdx)("h3",{id:"max_network_io_resource"},"max_network_io_resource"),(0,i.mdx)("p",null,"Maximum disk I/O resource available to Buck. By default the value is 30. Think\nabout it as Ethernet can handle 50 parallel network jobs with weight 1. Slower\nnetwork interfaces can handle less amount of jobs. If job needs to send or\nreceive a lot of data, it should require higher network I/O resource."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources]max_network_io_resource = 30\n")),(0,i.mdx)("h2",{id:"resources_per_rule"},"[resources_per_rule]"),(0,i.mdx)("p",null,"This section contains required resource amounts for various build rules. If\namount for some build rule is not specified in this section, then amount of 1\n(CPU), 1 (Memory), 0 (disk i/o) and 0 (network i/o) is used. Amounts are used in\nlocal building, so in most cases build rule will require 0 for network I/O\nunless it fetches any data from network. Rule's name is constructed by\nconverting the camel-style class name of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"BuildRule"),"in Buck's source code\n(e.g. ",(0,i.mdx)("inlineCode",{parentName:"p"},"MyBuildRule"),") into lower underscored name (e.g. ",(0,i.mdx)("inlineCode",{parentName:"p"},"my_build_rule"),")."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[resources_per_rule]cxx_link = 1, 1, 5, 0\n  android_binary = 8, 30, 30, 0\n\n")),(0,i.mdx)("p",null,"Buck will use the defined resource amounts during the build process in order to\nattempt to use all available resources."),(0,i.mdx)("h2",{id:"rust"},"[rust]"),(0,i.mdx)("p",null,"The settings to control how Buck builds ",(0,i.mdx)("inlineCode",{parentName:"p"},"rust_*")," rules."),(0,i.mdx)("h3",{id:"compiler-3"},"compiler"),(0,i.mdx)("p",null,"The path that Buck should use to compile Rust files. By default, it checks your\n",(0,i.mdx)("inlineCode",{parentName:"p"},"PATH"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]compiler = /usr/local/bin/rustc\n")),(0,i.mdx)("h3",{id:"rustc_flags"},"rustc_flags"),(0,i.mdx)("p",null,"Default command-line flags passed to all invocations of the rust compiler."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]rustc_flags = -g\n")),(0,i.mdx)("h3",{id:"rustc_binary_flags"},"rustc_binary_flags"),(0,i.mdx)("p",null,"Default command-line flags passed to invocations of the rust compiler in\n",(0,i.mdx)("inlineCode",{parentName:"p"},"rust_binary")," rules, in addition to options set in ",(0,i.mdx)("inlineCode",{parentName:"p"},"rustc_flags"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]rustc_binary_flags = -C lto\n")),(0,i.mdx)("h3",{id:"rustc_library_flags"},"rustc_library_flags"),(0,i.mdx)("p",null,"Default command-line flags passed to invocations of the rust compiler in\n",(0,i.mdx)("inlineCode",{parentName:"p"},"rust_library")," rules, in addition to options set in ",(0,i.mdx)("inlineCode",{parentName:"p"},"rustc_flags"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]rustc_library_flags = --cfg=debug\n")),(0,i.mdx)("h3",{id:"unflavored_binaries"},"unflavored_binaries"),(0,i.mdx)("p",null,"Controls whether the output from ",(0,i.mdx)("inlineCode",{parentName:"p"},"rust_binary")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"rust_test")," rules include a\nflavor from the platform in the path or not. Even unflavored, the path includes\n",(0,i.mdx)("inlineCode",{parentName:"p"},"#binary"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]unflavored_binaries = true\n")),(0,i.mdx)("h3",{id:"remap_src_paths"},"remap_src_paths"),(0,i.mdx)("p",null,"Controls whether ",(0,i.mdx)("inlineCode",{parentName:"p"},"rustc")," remaps the source paths in its output. Buck will always\nconstruct a link tree with the sources required for a given rule, which means\nthe paths passed to ",(0,i.mdx)("inlineCode",{parentName:"p"},"rustc")," are not the original source paths. This option will\nremap those paths in compiler output, debug info, ",(0,i.mdx)("inlineCode",{parentName:"p"},"file!()"),' and elsewhere to\nmatch the original source names. The options are "no" (don\'t remap), and "yes"\n(remap).'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]remap_src_paths = no\n")),(0,i.mdx)("h3",{id:"force_rlib"},"force_rlib"),(0,i.mdx)("p",null,"When ",(0,i.mdx)("inlineCode",{parentName:"p"},"force_rlib")," is true, then buck will always compile static (rlib) libraries\neven when the final target (binary or unit test) is being linked with a shared\nlink style. Rust code is typically always statically linked, and a lot of\nsurrounding tooling doesn't cope well with dynamically linked Rust crates.\nLinking with a shared link style will still dynamically link with C/C++ shared\nobjects."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]force_rlib = false\n")),(0,i.mdx)("h3",{id:"prefer_static_libs"},"prefer_static_libs"),(0,i.mdx)("p",null,"When ",(0,i.mdx)("inlineCode",{parentName:"p"},"prefer_static_libs")," is true, then buck will always prefer to link with\nstatic versions of a library when building a shared target. In practice, this\nonly affects linking with the standard library crates."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]prefer_static_libs = false\n")),(0,i.mdx)("h3",{id:"incremental"},"incremental"),(0,i.mdx)("p",null,"When set, enable rustc's incremental build option. Rust's incremental\ncompilation mode operates transparently to the build system - it is guaranteed\nto produce bit-for-bit identical output to non-incremental builds. To do this it\nmaintains a separate incremental database to one side. The only requirement is\nthat there is only ever one instance of ",(0,i.mdx)("inlineCode",{parentName:"p"},"rustc")," for a given crate at one time.\nBuck guarantees this by making sure there's a separate incremental database for\neach flavor (since builds for different flavors of the same target can be run\nconcurrently). The value of this option is an additional path fragment used for\nthe incremental database path. This allows the user to use separate databases\nfor optimized, debug, etc command lines. If this is not required, then it can be\nany valid pathname fragment."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]incremental = opt\n")),(0,i.mdx)("h3",{id:"default_edition"},"default_edition"),(0,i.mdx)("p",null,'Set the default edition for Rust rules. The edition can be specified on a\nper-rule basis, but this sets the default if nothing is specified. The default\nis "2015".'),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[rust]default_edition = 2018\n")),(0,i.mdx)("h2",{id:"sandbox"},"[sandbox]"),(0,i.mdx)("p",null,"This section controls sandboxing. Sandbox execution provides better guarantees\nabout resources accessible to the processes by using system-provided\ncapabilities to restrict certain usages (for example, restricting the set of\nfiles allowed to be read and write)."),(0,i.mdx)("h3",{id:"darwin_sandbox_enabled"},"darwin_sandbox_enabled"),(0,i.mdx)("p",null,"This option specifies whether sandboxing is enabled on OS X or not."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[sandbox]darwin_sandbox_enabled = true\n")),(0,i.mdx)("h3",{id:"genrule_sandbox_enabled"},"genrule_sandbox_enabled"),(0,i.mdx)("p",null,"Enables sandbox in ",(0,i.mdx)("inlineCode",{parentName:"p"},"genrule"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[sandbox]genrule_sandbox_enabled = true\n")),(0,i.mdx)("h2",{id:"test"},"[test]"),(0,i.mdx)("p",null,"The settings to control how Buck runs tests."),(0,i.mdx)("h3",{id:"incl_no_location_classes"},"incl_no_location_classes"),(0,i.mdx)("p",null,"This specifies whether jacoco code coverage is enabled on classes without source\nlocation. The default is false. Set to true to enable code coverage with\nrobolectric tests. Note that setting to true will include dynamically created\nsources in code coverage, such as that created by mocking (e.g. jmockit) or\npersistence frameworks."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]incl_no_location_classes = true\n")),(0,i.mdx)("h3",{id:"timeout"},"timeout"),(0,i.mdx)("p",null,"The number of milliseconds per test to allow before stopping the test and\nreporting a failure. The default is no timeout. Not all ",(0,i.mdx)("inlineCode",{parentName:"p"},"*_test")," rules utilize\nthis value. A JUnit test can override this via the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@Test")," annotation."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]timeout = 300000\n")),(0,i.mdx)("h3",{id:"rule_timeout"},"rule_timeout"),(0,i.mdx)("p",null,"The number of milliseconds per ",(0,i.mdx)("inlineCode",{parentName:"p"},"*_test")," rule to allow before stopping it and\nreporting a failure. The default is no timeout."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]rule_timeout = 1200000\n")),(0,i.mdx)("h3",{id:"external_runner"},"external_runner"),(0,i.mdx)("p",null,"This specifies an external test runner command to use instead of Buck's built-in\ntest runner. The external test runner is invoked by Buck after it has built all\nthe test rules. It passes the test runner the path to a file which contains a\nJSON-encoded list of test file infos via the ",(0,i.mdx)("inlineCode",{parentName:"p"},"--buck-test-info [path]")," command\nline option. Additionally, if\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/command/test.html"},(0,i.mdx)("inlineCode",{parentName:"a"},"buck test"))," is invoked with\n",(0,i.mdx)("inlineCode",{parentName:"p"},"-- [extra-runner-args]"),", these will be passed to the external runner before\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--buck-test-info"),". The JSON-encoded test file contains an array of infos. Those\ninfos have the following fields:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"target"),": The ",(0,i.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_target.html"},"build target")," of\nthe test rule."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"type"),": A string describing the type of the test."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"command"),": An array of command line arguments the test runner should invoke to\nrun the test."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"env"),": A map of environments variables that should be defined by the test\nrunner when running the test."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"labels"),": An array of labels that are defined on the test rule."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"contacts"),": An array of contacts that are defined on the test rule. These are\ntypically user names or email addresses.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]external_runner = command args...\n")),(0,i.mdx)("h3",{id:"thread_utilization_ratio"},"thread_utilization_ratio"),(0,i.mdx)("p",null,"Sets the maximum number of threads to use for testing as a ratio of the number\nof threads used for building. By default(",(0,i.mdx)("inlineCode",{parentName:"p"},"1.0"),"), buck uses runs tests on all\nthreads that were used for building."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]thread_utilization_ratio = 0.5\n")),(0,i.mdx)("h3",{id:"parallel_external_test_spec_computation_enabled"},"parallel_external_test_spec_computation_enabled"),(0,i.mdx)("p",null,"Whether external test spec computation is allowed to happen in parallel.\nEnabling this option can significantly speed up test execution when many test\ntargets are requested. By default it is disabled."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]parallel_external_test_spec_computation_enabled = false\n")),(0,i.mdx)("h3",{id:"threads-2"},"threads"),(0,i.mdx)("p",null,"Specify number of threads used when running test."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[test]threads = 5\n")),(0,i.mdx)("h2",{id:"thrift"},"[thrift]"),(0,i.mdx)("p",null,"This section provides settings to locate required thrift components."),(0,i.mdx)("h3",{id:"compiler-4"},"compiler"),(0,i.mdx)("p",null,"The path or ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target")," that\nbuilds the ",(0,i.mdx)("a",{parentName:"p",href:"https://thrift.apache.org/"},"thrift")," compiler that Buck should use."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[thrift]compiler = /usr/local/bin/thrift\n")),(0,i.mdx)("h3",{id:"compiler2"},"compiler2"),(0,i.mdx)("p",null,"The path or ",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target")," that\nbuilds the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/fbthrift"},"thrift2")," compiler that Buck\nshould use. If this is unset, it defaults to the value of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#thrift.compiler"},(0,i.mdx)("inlineCode",{parentName:"a"},"[thrift].compiler")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[thrift]compiler2 = /usr/local/bin/thrift2\n")),(0,i.mdx)("h2",{id:"tools"},"[tools]"),(0,i.mdx)("p",null,"This section tells Buck how to find certain tools e.g. how the Java compilation\noccurs and how auxiliary tools are used e.g. the\n",(0,i.mdx)("a",{parentName:"p",href:"http://proguard.sourceforge.net/"},"ProGuard")," Java class file optimizer which is\nused as part of the Android build process."),(0,i.mdx)("h3",{id:"javac"},"javac"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"javac")," option is a path to a program that acts like Java javac. When set,\nbuck uses this program instead of the system Java compiler. When neither this\nnor\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#tools.javac_jar"},(0,i.mdx)("inlineCode",{parentName:"a"},"[tools].javac_jar")),"\nis set, Buck defaults to using the system compiler in-memory."),(0,i.mdx)("h3",{id:"javac_jar"},"javac_jar"),(0,i.mdx)("p",null,"When this option is set to a JAR file, Buck loads the referenced compiler\nin-memory. When neither this nor\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#tools.javac"},(0,i.mdx)("inlineCode",{parentName:"a"},"[tools].javac")),"\nis set, Buck defaults to using the system compiler in-memory."),(0,i.mdx)("h3",{id:"java_for_tests"},"java_for_tests"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"java_for_tests")," option is a path to a ",(0,i.mdx)("inlineCode",{parentName:"p"},"java")," binary. When set, buck uses\nthat binary to execute Java tests\u2014when using either the internal or external\ntest runners\u2014instead of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"java")," binary used to run Buck itself. When this\noption is not set, Buck executes Java tests using the same binary used to run\nBuck."),(0,i.mdx)("h3",{id:"compiler_class_name"},"compiler_class_name"),(0,i.mdx)("p",null,"When javac_jar is set, Buck loads the referenced compiler class name from the\njar. When it is not set but javac_jar is set, Buck uses the default compiler\nclass."),(0,i.mdx)("h3",{id:"proguard"},"proguard"),(0,i.mdx)("p",null,"This option specifies the location of the JAR file to be used to invoke\nProGuard. This overrides the default ProGuard JAR file that would have been\npicked up from the Android SDK. Here is an example setting:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[tools]proguard = proguard/proguard-fork.jar\n")),(0,i.mdx)("h3",{id:"proguard-max-heap-size"},"proguard-max-heap-size"),(0,i.mdx)("p",null,"This option specifies how much memory is used when running proguard. Defaults to\n",(0,i.mdx)("inlineCode",{parentName:"p"},"1024M"),". You may want to give ProGuard more memory to try and improve\nperformance."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[tools]proguard-max-heap-size = 4096M\n")),(0,i.mdx)("h3",{id:"proguard-agentpath"},"proguard-agentpath"),(0,i.mdx)("p",null,"This option allows the specification of a Java profiling agent which is set with\nthe ",(0,i.mdx)("inlineCode",{parentName:"p"},"-agentpath")," argument when the ProGuard jar file is executed. Typically this\nwould be set in a ",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," configuration file for when you want to\nprofile a build running on your local machine. Set this to the actual path of\nthe installed agent on the machine where ProGuard will run."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[tools]proguard-agentpath = /Applications/YourKit_Java_Profiler_2015_build_15084.app/Contents/Resources/bin/mac/libyjpagent.jnilib\n")),(0,i.mdx)("h2",{id:"ui-1"},"[ui]"),(0,i.mdx)("p",null,"This section configures the appearance of Buck's command line interface."),(0,i.mdx)("h3",{id:"always_sort_threads_by_time"},"always_sort_threads_by_time"),(0,i.mdx)("p",null,"Specifies whether the lines with information about building and testing threads\nshould always be sorted by the time spent running the rules they are currently\nexecuting. When set to false, threads are only sorted if there are more threads\nthan available lines (see\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ui.thread_line_limit"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ui].thread_line_limit")),"\nfor an option to configure this limit). Only effective when the super console is\nused. The default value is false."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]always_sort_threads_by_time = true\n")),(0,i.mdx)("h3",{id:"error_message_augmentations"},"error_message_augmentations"),(0,i.mdx)("p",null,"This setting is preliminary and is likely to change. Specifies a comma-separated\nlist of mappings from regular expressions (regexes) to message strings. If the\ntext of a Buck parser error matches one of the specified regexes, the\ncorresponding message string is appended to the error. You can use the message\nstring to provide additional helpful information to the user. If the regex\ncontains unescaped parentheses, ",(0,i.mdx)("inlineCode",{parentName:"p"},"()"),", the text that the parentheses enclose is\ncaptured. You can then insert this captured text in the appended string by using\n",(0,i.mdx)("inlineCode",{parentName:"p"},"$1")," for the first captured text string, ",(0,i.mdx)("inlineCode",{parentName:"p"},"$2")," for the second, and so on. This\nworks exactly like Java regex replacement strings."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'[ui]error_message_augmentations = "The rule (//S+)-cxx could not be found." => "Please make sure that $1 is a cxx library.\n')),(0,i.mdx)("h3",{id:"relativize_targets_to_working_directory"},"relativize_targets_to_working_directory"),(0,i.mdx)("p",null,"Determines whether\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target_pattern.html"},"build target pattern"),"s\nprovided on the command line are relativized to the current working directory.\nFor example, if ",(0,i.mdx)("inlineCode",{parentName:"p"},"buck build bar/..."),"is run from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"foo")," subdirectory of the\nproject, the pattern",(0,i.mdx)("inlineCode",{parentName:"p"},"//foo/bar/...")," is built instead. If set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"false"),",\n",(0,i.mdx)("inlineCode",{parentName:"p"},"//bar/..."),"would be built. This defaults to true."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]relativize_targets_to_working_directory = false\n")),(0,i.mdx)("h3",{id:"enable_show_output_warning"},"enable_show_output_warning"),(0,i.mdx)("p",null,"Determines whether a deprecation warning for ",(0,i.mdx)("inlineCode",{parentName:"p"},"--show-output")," should be shown.\nThe warning also informs users that they should be using ",(0,i.mdx)("inlineCode",{parentName:"p"},"--show-outputs"),"\ninstead. This defaults to false."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]enable_show_output_warning = false\n")),(0,i.mdx)("h3",{id:"thread_line_limit"},"thread_line_limit"),(0,i.mdx)("p",null,"Specifies how many lines will be used to show the status of running threads\nduring building and testing by default. Only effective when the super console is\nused. The value has to be a positive number. The default value is 10."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]thread_line_limit = 10\n")),(0,i.mdx)("h3",{id:"thread_line_limit_on_warning"},"thread_line_limit_on_warning"),(0,i.mdx)("p",null,"Specifies how many lines will be used to show the status of running threads\nduring building and testing after a warning is reported. Only effective when the\nsuper console is used. The value has to be a positive number. Defaults to the\nvalue of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ui.thread_line_limit"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ui].thread_line_limit")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]thread_line_limit_on_warning = 10\n")),(0,i.mdx)("h3",{id:"thread_line_limit_on_error"},"thread_line_limit_on_error"),(0,i.mdx)("p",null,"Specifies how many lines will be used to show the status of running threads\nduring building and testing after an error is reported. Only effective when the\nsuper console is used. The value has to be a positive number. Defaults to the\nvalue of\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#ui.thread_line_limit"},(0,i.mdx)("inlineCode",{parentName:"a"},"[ui].thread_line_limit")),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]thread_line_limit_on_error = 10\n")),(0,i.mdx)("h3",{id:"truncate_failing_command"},"truncate_failing_command"),(0,i.mdx)("p",null,"Determines whether a failing executed command is truncated in error messages.\nThis defaults to true."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]truncate_failing_command = true\n")),(0,i.mdx)("h3",{id:"superconsole"},"superconsole"),(0,i.mdx)("p",null,"Whether the super console is enabled. If so, a more reactive UI will be shown.\nValid values are ENABLED, DISABLED, and AUTO. By default, this is set to AUTO\nwhich will take OS, terminal settings and other things into account. In most\ninteractive cases, it will be enabled."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]superconsole = ENABLED\n")),(0,i.mdx)("h3",{id:"warn_on_config_file_overrides"},"warn_on_config_file_overrides"),(0,i.mdx)("p",null,"Whether to display a warning when using configuration overrides from\n",(0,i.mdx)("inlineCode",{parentName:"p"},".buckconfig.local")," or any of the files mentioned in\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#config-precedence"},(0,i.mdx)("strong",{parentName:"a"},"Precedence of Buck configuration specifications")),"\nThis is true by default."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]warn_on_config_file_overrides = false\n")),(0,i.mdx)("h3",{id:"warn_on_config_file_overrides_ignored_files"},"warn_on_config_file_overrides_ignored_files"),(0,i.mdx)("p",null,"A comma-separated list of names of configuration files that should be ignored.\nBy default, Buck prints a warning if settings are in use from any of the files\nin\n",(0,i.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#config-precedence"},(0,i.mdx)("strong",{parentName:"a"},"Precedence of Buck configuration specifications")),"\nSometimes, however, a user should not be alerted about specific files. For\nexample, there may be global Buck settings in ",(0,i.mdx)("inlineCode",{parentName:"p"},"/etc/buckconfig.d/system")," that\nare managed by an IT organization, not the user, and the warning would just be\nignored. In this case, this setting could be set to ",(0,i.mdx)("inlineCode",{parentName:"p"},"system"),"so that\n",(0,i.mdx)("inlineCode",{parentName:"p"},"/etc/buckconfig.d/system")," being present would not elicit a warning."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[ui]warn_on_config_file_overrides_ignored_files = experiments,system\n")),(0,i.mdx)("h2",{id:"worker"},"[worker]"),(0,i.mdx)("p",null,"This section configures how Buck's workers (",(0,i.mdx)("inlineCode",{parentName:"p"},"worker_tool"),"s and similar) work."),(0,i.mdx)("h3",{id:"persistent"},"persistent"),(0,i.mdx)("p",null,"Specifies whether by default workers run in persistent mode (reusing the worker\nprocess across builds). The ",(0,i.mdx)("inlineCode",{parentName:"p"},"persistent")," option of ",(0,i.mdx)("inlineCode",{parentName:"p"},"worker_tool")," overrides this\ndefault. The default value is false. Be careful when switching this to true\nsince the workers will not shut down after buck commands and will continue\nconsuming system resources."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"[worker]persistent = false\n")))}p.isMDXComponent=!0}}]);