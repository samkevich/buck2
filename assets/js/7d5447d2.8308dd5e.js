"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7457],{3905:(e,n,a)=>{a.r(n),a.d(n,{MDXContext:()=>p,MDXProvider:()=>s,mdx:()=>b,useMDXComponents:()=>c,withMDXComponents:()=>m});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},i.apply(this,arguments)}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),m=function(e){return function(n){var a=c(n.components);return t.createElement(e,i({},n,{components:a}))}},c=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},s=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},x=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),m=c(a),s=r,u=m["".concat(o,".").concat(s)]||m[s]||y[s]||i;return a?t.createElement(u,l(l({ref:n},p),{},{components:a})):t.createElement(u,l({ref:n},p))}));function b(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=x;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}x.displayName="MDXCreateElement"},73591:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var t=a(87462),r=(a(67294),a(3905));const i={},o="Tutorials",l={unversionedId:"legacy/basics/tutorials",id:"legacy/basics/tutorials",title:"Tutorials",description:"This expanded tutorial shows extended concepts about using Buck to build a",source:"@site/../docs/legacy/basics/tutorials.md",sourceDirName:"legacy/basics",slug:"/legacy/basics/tutorials",permalink:"/docs/legacy/basics/tutorials",draft:!1,tags:[],version:"current",frontMatter:{}},d={},p=[{value:"Path Setup",id:"path-setup",level:2},{value:"Create Project",id:"create-project",level:2},{value:"Compile Your Code",id:"compile-your-code",level:2},{value:"Package Resources",id:"package-resources",level:2},{value:"Create a Keystore",id:"create-a-keystore",level:2},{value:"Build an APK",id:"build-an-apk",level:2},{value:"Create an Alias",id:"create-an-alias",level:2},{value:"Create an IntelliJ Project",id:"create-an-intellij-project",level:2}],m={toc:p};function c(e){let{components:n,...a}=e;return(0,r.mdx)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"tutorials"},"Tutorials"),(0,r.mdx)("p",null,"This expanded tutorial shows extended concepts about using Buck to build a\nproject after you have installed Buck, including creating a project, building a\nproject, packaging a project, etc."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},(0,r.mdx)("strong",{parentName:"p"},"Currently this tutorial is Android specific for either Mac or Linux. We will\nbe adding iOS, Java and Windows specific tutorial information in the near\nfuture."))),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},(0,r.mdx)("strong",{parentName:"th"},"Platform:")),(0,r.mdx)("th",{parentName:"tr",align:null},"AndroidMacOSLinux"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("strong",{parentName:"td"},"Development OS:")),(0,r.mdx)("td",{parentName:"tr",align:null},"macOSLinux")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("strong",{parentName:"td"},"Language:")),(0,r.mdx)("td",{parentName:"tr",align:null},"JavaKotlinRust")))),(0,r.mdx)("h2",{id:"path-setup"},"Path Setup"),(0,r.mdx)("p",null,"Add Buck to your ",(0,r.mdx)("inlineCode",{parentName:"p"},"$PATH")," and set up\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/buckd.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buckd")),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"sudo ln -s ${PWD}/bin/buck /usr/bin/buck\nsudo ln -s ${PWD}/bin/buckd /usr/bin/buckd\n")),(0,r.mdx)("h2",{id:"create-project"},"Create Project"),(0,r.mdx)("p",null,"We are going to build a sample application. We should start our project in an\nempty directory, so create a new one and navigate to it:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"mkdir -p ~/my-first-buck-project/\ncd ~/my-first-buck-project/\n")),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},(0,r.mdx)("strong",{parentName:"p"},"Note: the following instructions will now assume that all commands are run\nfrom your ",(0,r.mdx)("inlineCode",{parentName:"strong"},"~/my-first-buck-project")," directory."))),(0,r.mdx)("h2",{id:"compile-your-code"},"Compile Your Code"),(0,r.mdx)("p",null,"Android applications are typically written in Java and kotlin, so the first\nthing we will do is to configure Buck to compile code against the Android API.\nTo do so, Buck needs to know where your Android SDK is. Assuming that your\nAndroid SDK is installed in ",(0,r.mdx)("inlineCode",{parentName:"p"},"~/android-sdk"),", run the following command to set a\n",(0,r.mdx)("inlineCode",{parentName:"p"},"ANDROID_SDK")," environment variable that tells Buck where to find your Android\nSDK:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"export ANDROID_SDK=$HOME/android-sdk\n")),(0,r.mdx)("p",null,"Now that Buck can locate your Android SDK, it is time to compile some Java code.\nFirst, we create a simple ",(0,r.mdx)("inlineCode",{parentName:"p"},"Activity")," at\n",(0,r.mdx)("inlineCode",{parentName:"p"},"java/com/example/activity/MyFirstActivity.java"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'mkdir -p java/com/example/activity/\necho "package com.example.activity;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class MyFirstActivity extends Activity {\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n  }\n}" > java/com/example/activity/MyFirstActivity.java\n')),(0,r.mdx)("p",null,"Now we need a build file that defines a build rule to compile this Java code, so\nwe create an\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/learning/rule/android_library.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"android_library()")),"\nrule in ",(0,r.mdx)("inlineCode",{parentName:"p"},"java/com/example/activity/BUCK"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"echo \"android_library(\n  name = 'activity',\n  srcs = glob(['*.java']),\n  visibility = [ 'PUBLIC' ],\n)\" > java/com/example/activity/BUCK\n")),(0,r.mdx)("p",null,"Now we can compile our Java code using Buck:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck build //java/com/example/activity:activity\n")),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},"Buck generates its output in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck-out")," directory, so this is a good time\nto specify ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck-out")," as something that should be ignored by your version\ncontrol system.")),(0,r.mdx)("h2",{id:"package-resources"},"Package Resources"),(0,r.mdx)("p",null,"Android applications frequently contain resources, such as strings and images.\nFor this example, we will create a trivial Android resource bundle that contains\na single string:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"mkdir -p res/com/example/activity/res/values/\necho \"<?xml version='1.0' encoding='utf-8' ?>\n<resources>\n  <string name='app_name'>Hello World</string>\n</resources>\" > res/com/example/activity/res/values/strings.xml\n")),(0,r.mdx)("p",null,"Buck needs a way to reference this collection of resources, so we need to create\na build file that defines an\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/rule/android_resource.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"android_resource"))," rule:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"echo \"android_resource(\n  name = 'res',\n  res = subdir_glob([('res', '**')]),\n  package = 'com.example',\n  visibility = [\n    '//apps/myapp:',\n  ],\n)\" > res/com/example/activity/BUCK\n")),(0,r.mdx)("h2",{id:"create-a-keystore"},"Create a Keystore"),(0,r.mdx)("p",null,"In practice, you will want to be able to test your Android app on a physical\nAndroid device, which means that it needs to be signed. We will create\napp-specific information, such as the key and manifest, in its own directory to\nkeep things tidy:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"mkdir -p apps/myapp/\n")),(0,r.mdx)("p",null,"To keep things simple, we will create a self-signed certificate for debugging."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},"Unfortunately, this is not a one-liner because there is a number of prompts\nfrom the ",(0,r.mdx)("inlineCode",{parentName:"p"},"keytool")," command.")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"keytool -genkey -keystore apps/myapp/debug.keystore -alias my_alias \\\n    -keyalg RSA -keysize 2048 -validity 10000\n")),(0,r.mdx)("p",null,"When prompted for a keystore password, just use ",(0,r.mdx)("inlineCode",{parentName:"p"},"android")," (and then type it\nagain to confirm it), and hit ",(0,r.mdx)("inlineCode",{parentName:"p"},"Enter")," to accept the default values for name,\norganizational unit, etc. Then create a ",(0,r.mdx)("inlineCode",{parentName:"p"},".properties")," file that stores all of\nthis information:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'echo "key.alias=my_alias\nkey.store.password=android\nkey.alias.password=android" > apps/myapp/debug.keystore.properties\n')),(0,r.mdx)("h2",{id:"build-an-apk"},"Build an APK"),(0,r.mdx)("p",null,"An Android application needs a manifest named ",(0,r.mdx)("inlineCode",{parentName:"p"},"AndroidManifest.xml"),", so we must\ncreate such a file:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"echo \"<?xml version='1.0' encoding='utf-8'?>\n<manifest xmlns:android='http://schemas.android.com/apk/res/android'\n          package='com.example'\n          >\n\n  <application\n      android:label='@string/app_name'\n      android:hardwareAccelerated='true'>\n    <activity android:name='.activity.MyFirstActivity'>\n      <intent-filter>\n        <action android:name='android.intent.action.MAIN' />\n        <category android:name='android.intent.category.LAUNCHER' />\n      </intent-filter>\n    </activity>\n  </application>\n\n</manifest>\" > apps/myapp/AndroidManifest.xml\n")),(0,r.mdx)("p",null,"Now we define an ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/rule/android_binary.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"android_binary")),"\nand ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/rule/keystore.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"keystore"))," rule in our build file:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"echo \"android_binary(\n  name = 'app',\n  manifest = 'AndroidManifest.xml',\n  manifest_entries = {\n    'version_code': 1,\n    'version_name': '1.0',\n    'min_sdk_version': 26,\n    'target_sdk_version': 29\n  },\n  keystore = ':debug_keystore',\n  deps = [\n    '//java/com/example/activity:activity',\n    '//res/com/example/activity:res',\n  ],\n)\n\nkeystore(\n  name = 'debug_keystore',\n  store = 'debug.keystore',\n  properties = 'debug.keystore.properties',\n)\" > apps/myapp/BUCK\n")),(0,r.mdx)("p",null,"Building an ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/rule/android_binary.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"android_binary"))," rule\nwill produce an APK:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck build //apps/myapp:app\n")),(0,r.mdx)("p",null,"Alternatively, if you have an Android device connected to your computer, you can\nbuild and install the APK in one step with\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/install.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck install")),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck install //apps/myapp:app\n")),(0,r.mdx)("h2",{id:"create-an-alias"},"Create an Alias"),(0,r.mdx)("p",null,"Typing ",(0,r.mdx)("inlineCode",{parentName:"p"},"buck build //apps/myapp:app")," every time you want to rebuild your APK can\nbe tedious. Fortunately, Buck makes it possible to define an ",(0,r.mdx)("em",{parentName:"p"},"alias")," for a build\ntarget. An alias can always be used in place of a build target when using Buck's\ncommand-line interface. Aliases must be defined in the\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#alias"},(0,r.mdx)("inlineCode",{parentName:"a"},"[alias]"))," a config\nfile in the root of the project:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'echo "[alias]\n    app = //apps/myapp:app" > .buckconfig\n')),(0,r.mdx)("p",null,"With this alias in place, the command to build and install the APK is much\nshorter and easier to remember:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck install app\n")),(0,r.mdx)("h2",{id:"create-an-intellij-project"},"Create an IntelliJ Project"),(0,r.mdx)("p",null,"You likely want to develop your Android app using an IDE. Fortunately, Buck can\ngenerate an IntelliJ project from the build rules you defined in your build\nfiles. In order to ensure that IntelliJ recognizes where your Java folders are,\nyou need to specify the\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#java.src_roots"},(0,r.mdx)("inlineCode",{parentName:"a"},"[java].src_roots")),"\nin your ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html"},(0,r.mdx)("inlineCode",{parentName:"a"},".buckconfig"))," file:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'echo "[java]\n    src_roots = /java/" >> .buckconfig\n')),(0,r.mdx)("p",null,"Now you can create the IntelliJ project by running\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/project.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck project")),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"buck project --ide intellij\n")),(0,r.mdx)("p",null,"Note that you will likely want to exclude these generated files from version\ncontrol, so add the following to your ",(0,r.mdx)("inlineCode",{parentName:"p"},".gitignore")," file (or ",(0,r.mdx)("inlineCode",{parentName:"p"},".hgignore")," if you\nare using Mercurial) along with the files generated by\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/buckd.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buckd")),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'echo "/.buckd\n/buck-out\n*.iml\n/.idea/compiler.xml\n/.idea/libraries/*.xml\n/.idea/modules.xml\n/.idea/runConfigurations/Debug_Buck_test.xml" > .gitignore\n')),(0,r.mdx)("p",null,"Now you can build your Android application from either IntelliJ or the command\nline."))}c.isMDXComponent=!0}}]);