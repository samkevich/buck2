"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6661],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>s});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){return function(t){var n=u(t.components);return a.createElement(e,i({},t,{components:n}))}},u=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(n),c=r,m=s["".concat(p,".").concat(c)]||s[c]||b[c]||i;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,p[1]=l;for(var d=2;d<i;d++)p[d]=n[d];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},34692:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={},p="Build Target Pattern",l={unversionedId:"legacy/concepts/build-target-pattern",id:"legacy/concepts/build-target-pattern",title:"Build Target Pattern",description:"A build target pattern is a string that describes a set of one or more",source:"@site/../docs/legacy/concepts/build-target-pattern.md",sourceDirName:"legacy/concepts",slug:"/legacy/concepts/build-target-pattern",permalink:"/docs/legacy/concepts/build-target-pattern",draft:!1,tags:[],version:"current",frontMatter:{}},o={},d=[{value:"Build target patterns are not allowed in the deps argument",id:"build-target-patterns-are-not-allowed-in-the-deps-argument",level:3},{value:"Target aliases",id:"target-aliases",level:3}],s={toc:d};function u(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"build-target-pattern"},"Build Target Pattern"),(0,r.mdx)("p",null,"A ",(0,r.mdx)("em",{parentName:"p"},"build target pattern")," is a string that describes a set of one or more\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target"),"s. You can use build\ntarget patterns as arguments to commands, such as\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/build.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck build"))," and\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/command/query.html"},(0,r.mdx)("inlineCode",{parentName:"a"},"buck query")),". You can also use build\ntarget patterns in the ",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/concept/visibility.html"},"Visibility"),"\nargument of your build rules. The simplest build target pattern matches the\nbuild target of the same name:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"#\n# Matches //apps/myapp:app\n#\n//apps/myapp:app\n")),(0,r.mdx)("p",null,"A build target pattern that ends with a colon matches all build targets in the\nbuild file at the preceding directory path. For example, suppose that the build\nfile"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"apps/myapp/BUCK\n")),(0,r.mdx)("p",null,"defines the rules: ",(0,r.mdx)("inlineCode",{parentName:"p"},"app_debug")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"app_release"),", then the following build\ntarget pattern would match both of those rules:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"#\n# Matches //apps/myapp:app_debug and //apps/myapp:app_release\n#\n//apps/myapp:\n")),(0,r.mdx)("p",null,"A build target pattern that ends with an ellipsis (",(0,r.mdx)("inlineCode",{parentName:"p"},"/..."),") matches all build\ntargets in the build file in the directory that precedes the ellipsis and also\n",(0,r.mdx)("em",{parentName:"p"},"all build targets in build files in subdirectories"),". For example, suppose that\nyou have the following build files:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"apps/BUCK\napps/myapp/BUCK\n")),(0,r.mdx)("p",null,"then the following pattern would match all build targets in both of those files:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"#\n# Matches (for example) //apps:common and //apps/myapp:app\n#\n//apps/...\n")),(0,r.mdx)("h3",{id:"build-target-patterns-are-not-allowed-in-the-deps-argument"},"Build target patterns are not allowed in the deps argument"),(0,r.mdx)("p",null,"Build target patterns cannot be used with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"deps")," argument of a build rule.\nBuck requires that you specify all dependencies explicitly as either\nfully-qualified or relative build targets. By making dependencies explicit, Buck\nprevents build rules from ",(0,r.mdx)("em",{parentName:"p"},"inadvertently")," adding new dependencies, which can\nresult in non-reproducible builds. In addition, if the added dependencies are\nnot actually required, they can unnecessarily drive up the computational cost of\nthe build."),(0,r.mdx)("h3",{id:"target-aliases"},"Target aliases"),(0,r.mdx)("p",null,"Buck supports the ability to define ",(0,r.mdx)("em",{parentName:"p"},"aliases")," for build targets; using aliases\ncan improve brevity when specifying targets on the Buck command line. For more\ninformation, see the\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#alias"},(0,r.mdx)("inlineCode",{parentName:"a"},"[alias]"))," section in\nthe documentation for\n",(0,r.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html"},(0,r.mdx)("inlineCode",{parentName:"a"},".buckconfig")),"."))}u.isMDXComponent=!0}}]);