"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2155],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>b,useMDXComponents:()=>d,withMDXComponents:()=>p});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){return function(n){var t=d(n.components);return r.createElement(e,i({},n,{components:t}))}},d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),u=a,m=p["".concat(o,".").concat(u)]||p[u]||h[u]||i;return t?r.createElement(m,l(l({ref:n},s),{},{components:t})):r.createElement(m,l({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},66082:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(87462),a=(t(67294),t(3905));const i={},o="Key concepts",l={unversionedId:"legacy/basics/key-concepts",id:"legacy/basics/key-concepts",title:"Key concepts",description:"Buck has a number of fundamental concepts:",source:"@site/../docs/legacy/basics/key-concepts.md",sourceDirName:"legacy/basics",slug:"/legacy/basics/key-concepts",permalink:"/docs/legacy/basics/key-concepts",draft:!1,tags:[],version:"current",frontMatter:{}},c={},s=[{value:"Buck&#39;s dependency graph",id:"bucks-dependency-graph",level:3},{value:"Multiple Buck projects in a single repository",id:"multiple-buck-projects-in-a-single-repository",level:3}],p={toc:s};function d(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"key-concepts"},"Key concepts"),(0,a.mdx)("p",null,"Buck has a number of fundamental concepts:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"A ",(0,a.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_rule.html"},(0,a.mdx)("strong",{parentName:"a"},(0,a.mdx)("em",{parentName:"strong"},"build rule")))," describes how\nto produce an output file from a set of input files. Most build rules are\nspecific to a particular language or platform. For example, you would use the\n",(0,a.mdx)("a",{parentName:"li",href:"https://buck.build/rule/cxx_binary.html"},(0,a.mdx)("inlineCode",{parentName:"a"},"cxx_binary"))," rule to create a C++\nbinary, but you would use the\n",(0,a.mdx)("a",{parentName:"li",href:"https://buck.build/rule/android_binary.html"},(0,a.mdx)("inlineCode",{parentName:"a"},"android_binary"))," rule to create\nan Android APK."),(0,a.mdx)("li",{parentName:"ul"},"A ",(0,a.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_target.html"},(0,a.mdx)("strong",{parentName:"a"},(0,a.mdx)("em",{parentName:"strong"},"build target")))," is a\nstring that uniquely identifies a build rule. It can be thought of as a URI\nfor the build rule within the Buck project."),(0,a.mdx)("li",{parentName:"ul"},"A ",(0,a.mdx)("a",{parentName:"li",href:"https://buck.build/concept/build_file.html"},(0,a.mdx)("strong",{parentName:"a"},(0,a.mdx)("em",{parentName:"strong"},"build file")))," defines one\nor more build rules. In Buck, build files are typically named ",(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK"),". A ",(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK"),"\nfile is analogous to the ",(0,a.mdx)("inlineCode",{parentName:"li"},"Makefile")," used by the Make utility. In your project,\nyou will usually have a separate ",(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK")," file for each buildable unit of\nsoftware\u2014such as a binary or library. For large projects, you could have\nhundreds of ",(0,a.mdx)("inlineCode",{parentName:"li"},"BUCK")," files.")),(0,a.mdx)("p",null,"A Buck ",(0,a.mdx)("strong",{parentName:"p"},(0,a.mdx)("em",{parentName:"strong"},"package"))," comprises: a Buck build file (a ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file), all\nfiles\u2014such as source files and headers\u2014in the same directory as the ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file\nor in subdirectories, provided those subdirectories do not themselves contain a\n",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file. To say it another way, a ",(0,a.mdx)("inlineCode",{parentName:"p"},"BUCK")," file defines the root of a package,\nbut Buck packages might not include all their subdirectories because Buck\npackages do not overlap or contain other Buck packages. For example, in the\nfollowing diagram, the BUCK file in directory ",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-1")," defines that directory\nas the root of a package\u2014which is labeled ",(0,a.mdx)("strong",{parentName:"p"},"Package A")," in the diagram. The\ndirectory ",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-2")," is part of Package A because it is a subdirectory of\n",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-1"),", but does not itself contain a BUCK file. Now, consider directory\n",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-3"),". Because ",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-3")," contains a BUCK file it is the root of a new\npackage (",(0,a.mdx)("strong",{parentName:"p"},"Package B"),"). Although ",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-3")," is a subdirectory of ",(0,a.mdx)("inlineCode",{parentName:"p"},"app-dir-1"),",\nit is ",(0,a.mdx)("em",{parentName:"p"},"not")," part of Package A. Buck has the concept of a ",(0,a.mdx)("strong",{parentName:"p"},(0,a.mdx)("em",{parentName:"strong"},"cell")),", which\ndefines a directory tree of one or more Buck packages. A Buck build could\ninvolve multiple cells. Cells often correspond to repositories, but this isn't\nrequired. The root of a Buck cell contains a global configuration file called\n",(0,a.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html"},(0,a.mdx)("strong",{parentName:"a"},(0,a.mdx)("inlineCode",{parentName:"strong"},".buckconfig"))),". Note\nthat although the cell root should contain a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),", the presence of a\n",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," file doesn't in itself define a cell. Rather, ",(0,a.mdx)("em",{parentName:"p"},"the cells involved\nin a build are defined at the time Buck is invoked"),"; they are specified in the\n",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," for the Buck ",(0,a.mdx)("em",{parentName:"p"},"project")," (see below). A Buck ",(0,a.mdx)("strong",{parentName:"p"},(0,a.mdx)("em",{parentName:"strong"},"project"))," is\ndefined by the ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," where Buck is invoked, or if that directory doesn't\ncontain a ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),", the project is defined by the ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," in the\nnearest ancestor directory. The ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," for the project specifies the\ncells that constitute the Buck project. Specifically, these cells are specified\nin the\n",(0,a.mdx)("a",{parentName:"p",href:"https://buck.build/files-and-dirs/buckconfig.html#repositories"},(0,a.mdx)("inlineCode",{parentName:"a"},"[repositories]")),"\nsection of the ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig"),". Note that the directory tree rooted at this\n",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," is automatically considered a cell by Buck; in other words, the\nproject's ",(0,a.mdx)("inlineCode",{parentName:"p"},".buckconfig")," doesn't need to specify the project cell\nexplicitly\u2014although it is a good practice to do so."),(0,a.mdx)("h3",{id:"bucks-dependency-graph"},"Buck's dependency graph"),(0,a.mdx)("p",null,"Every build rule can have zero or more dependencies. You can specify these\ndependencies using, for example, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps")," argument to the build rule. For more\ninformation about specifying dependencies, consult the reference page for the\nbuild rule you are using. These dependencies form a directed graph, called the\n",(0,a.mdx)("em",{parentName:"p"},"target graph"),'. Buck requires the graph to be acyclic. When building the output\nof a build rule, all of the rule\'s transitive dependencies are built first. This\nmeans that the graph is built in a "bottom-up" fashion. A build rule knows only\nwhich rules it depends on, not which rules depend on it. This makes the graph\neasier to reason about and enables Buck to identify independent subgraphs that\ncan be built in parallel. It also enables Buck to determine the minimal set of\nbuild targets that need to be rebuilt. For more information about how Buck\nleverages the graph of build dependencies, see\n',(0,a.mdx)("a",{parentName:"p",href:"https://buck.build/concept/what_makes_buck_so_fast.html"},"What Makes Buck so Fast"),"."),(0,a.mdx)("h3",{id:"multiple-buck-projects-in-a-single-repository"},"Multiple Buck projects in a single repository"),(0,a.mdx)("p",null,"Buck is designed to build multiple deliverables from a single repository\u2014that\nis, a ",(0,a.mdx)("em",{parentName:"p"},"monorepo"),"\u2014rather than from multiple repositories. Support for the\nmonorepo design motivated Buck's support for cells and projects. It is\nFacebook's experience that maintaining all dependencies in the same repository\nmakes it easier to ensure that all developers have the correct version of the\ncode and simplifies the process of making atomic commits."))}d.isMDXComponent=!0}}]);