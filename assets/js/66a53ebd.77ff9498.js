"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9972],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>v,useMDXComponents:()=>d,withMDXComponents:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),m=function(e){return function(n){var t=d(n.components);return r.createElement(e,o({},n,{components:t}))}},d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(t),c=a,u=m["".concat(i,".").concat(c)]||m[c]||f[c]||o;return t?r.createElement(u,l(l({ref:n},p),{},{components:t})):r.createElement(u,l({ref:n},p))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},60787:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={id:"parity_script",title:"Parity Testing"},i=void 0,l={unversionedId:"developers/parity_script",id:"developers/parity_script",title:"Parity Testing",description:"This page covers the parity testing/command replay script found in",source:"@site/../docs/developers/parity_script.md",sourceDirName:"developers",slug:"/developers/parity_script",permalink:"/docs/developers/parity_script",draft:!1,tags:[],version:"current",frontMatter:{id:"parity_script",title:"Parity Testing"},sidebar:"manualSidebar",previous:{title:"Buck1 vs Buck2",permalink:"/docs/developers/architecture/buck1_vs_buck2"},next:{title:"Finding Commands That Buck2 Ran",permalink:"/docs/developers/what-ran"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Flags",id:"flags",level:2},{value:"Running the script",id:"running-the-script",level:2},{value:"Development",id:"development",level:2}],m={toc:p};function d(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"This page covers the parity testing/command replay script found in\n",(0,a.mdx)("inlineCode",{parentName:"p"},"scripts/buck_replay/main.py"),"."),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck_replay")," script is meant to test parity between v1 and v2\nimplementations of commands by querying for logs of the repo and execution state\n(args, directory) of v2 command invocations, reproducing it locally, making the\nnecessary conversions from v2 to v1 args, and then running both versions of the\ncommand so output can be checked/compared."),(0,a.mdx)("p",null,"When output differs/parity testing fails, the results are logged into a Scuba\ntable for future reference/analysis."),(0,a.mdx)("h2",{id:"flags"},"Flags"),(0,a.mdx)("p",null,"The following is a list of arguments/flags currently supported by the list:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"--verbose")," - supplying this turns on debug logging. By default, the replay\nscript logs updates on script progress and any errors that happen. When\n",(0,a.mdx)("inlineCode",{parentName:"li"},"--verbose")," is given, debug logging will also provide updates on commit and\ndirectory changes while parity testing."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"--dry-run")," - toggles logging to a test Scuba table instead of the production\none. Useful if you're making edits/testing the script itself."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"--epoch")," - the time after which to query Scuba for logs of commands for, as a\nUnix timestamp. If not supplied, it defaults to the last 24 hours."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"--limit")," - limits the number of rows queried from Scuba. The default limit is\n100000 rows.")),(0,a.mdx)("h2",{id:"running-the-script"},"Running the script"),(0,a.mdx)("p",null,"The script can be run with buck:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-shell"},"buck run //buck2/scripts/buck_replay:buck_replay\n")),(0,a.mdx)("p",null,"Example with flags:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-shell"},"buck run //buck2/scripts/buck_replay:buck_replay -- --verbose --dry-run --epoch 1626739329 --limit 100000\n")),(0,a.mdx)("h2",{id:"development"},"Development"),(0,a.mdx)("p",null,"The script does not yet support commands beyond ",(0,a.mdx)("inlineCode",{parentName:"p"},"audit config"),". Because of\ndifferences in flags (different names, new/dropped flags, and so on) in v1 and\nv2 implementations of commands, there needs to be some conversion when going\nfrom one set of arguments to the other. As such, support for a command requires\nthe implementation of a ",(0,a.mdx)("inlineCode",{parentName:"p"},"Command")," class for that command, and with it, several\nmethods:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"format_common_args"),", ",(0,a.mdx)("inlineCode",{parentName:"li"},"format_args_v1"),", ",(0,a.mdx)("inlineCode",{parentName:"li"},"format_args_v2")," - to format the\nflags/arguments in common between the v1 and v2 versions of a command as well\nas the ones specific to v1 and v2, respectively."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"run_v1")," and ",(0,a.mdx)("inlineCode",{parentName:"li"},"run_v2")," - meant to run the v1 and v2 commands and capture the\nrelevant output."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"test_parity"),' - meant to compare the output the v1 and v2 outputs (note that\nthe standard for what\'s "equal" may change between commands) and log whatever\nis necessary.')),(0,a.mdx)("p",null,"You can also work on features surrounding the replay script; specifically,\nadding logging to more commands (since in v2 only ",(0,a.mdx)("inlineCode",{parentName:"p"},"audit config")," logging is\nsupported) and Ingress tailer support (currently command logging is handled by\n",(0,a.mdx)("inlineCode",{parentName:"p"},"CommandReporterProcessor"),")."))}d.isMDXComponent=!0}}]);