"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9811],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>u,MDXProvider:()=>p,mdx:()=>b,useMDXComponents:()=>c,withMDXComponents:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),d=function(e){return function(t){var n=c(t.components);return r.createElement(e,i({},t,{components:n}))}},c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},h="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),p=a,h=d["".concat(s,".").concat(p)]||d[p]||f[p]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[h]="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91583:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={},s="What Makes Buck so Fast?",o={unversionedId:"legacy/about/fast",id:"legacy/about/fast",title:"What Makes Buck so Fast?",description:"Buck exploits a number of strategies to reduce build times.",source:"@site/../docs/legacy/about/fast.md",sourceDirName:"legacy/about",slug:"/legacy/about/fast",permalink:"/docs/legacy/about/fast",draft:!1,tags:[],version:"current",frontMatter:{}},l={},u=[{value:"Buck builds dependencies in parallel",id:"buck-builds-dependencies-in-parallel",level:2},{value:"Buck uses only first-order dependencies for Java",id:"buck-uses-only-first-order-dependencies-for-java",level:2},{value:"Buck uses dependency files to trim over-specified inputs",id:"buck-uses-dependency-files-to-trim-over-specified-inputs",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"what-makes-buck-so-fast"},"What Makes Buck so Fast?"),(0,a.mdx)("p",null,"Buck exploits a number of strategies to reduce build times."),(0,a.mdx)("h2",{id:"buck-builds-dependencies-in-parallel"},"Buck builds dependencies in parallel"),(0,a.mdx)("p",null,"Buck is designed so that any input files required by a\n",(0,a.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_target.html"},"build target")," must be specified\nin the ",(0,a.mdx)("a",{parentName:"p",href:"https://buck.build/concept/build_rule.html"},"build rule")," for that target.\nTherefore, we can know that the directed acyclic graph\n",(0,a.mdx)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Directed_acyclic_graph"},"(DAG)")," that Buck\nconstructs from the build rule is an accurate reflection of the build's\ndependencies, and that once a rule's dependencies are satisfied, the target for\nthat rule can be built. Having a DAG makes it straightforward for rules to be\nbuilt in parallel, which can dramatically reduce build times. Buck starts with\nthe leaf nodes of the graph, that is, targets that have no dependencies. Buck\nadds these to a queue of targets to build. When a thread is available, Buck\nremoves a target from the front of the queue and builds it. Assuming the target\nbuilds successfully, Buck notifies all of the rules that depend on that target.\nWhen all of a rule's dependencies have been satisfied, Buck adds that rule's\ntarget to the build queue. Computation proceeds in this manner until all of the\nnodes in the graph have been built. This execution model means that breaking\nmodules into finer dependencies creates opportunities for increased parallelism,\nwhich improves throughput."),(0,a.mdx)("h2",{id:"buck-uses-only-first-order-dependencies-for-java"},"Buck uses only first-order dependencies for Java"),(0,a.mdx)("p",null,"When compiling Java, Buck uses first-order dependencies only, that is,\ndependencies that you specify explicitly in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"deps")," argument of your build\nrule. This means that the compilation step in your build sees only\nexplicitly-declared dependencies, not other libraries that those dependencies\nthemselves depend on. Using only first-order dependencies dramatically shrinks\nthe set of APIs that your Java code is exposed to, which dramatically reduces\nthe scope of changes that will trigger a rebuild. ",(0,a.mdx)("strong",{parentName:"p"},"NOTE:")," If your rule does,\nin fact, depend on a dependency of one of your explicitly-specified\ndependencies\u2014such as a ",(0,a.mdx)("em",{parentName:"p"},"second-order")," dependency\u2014you can make that dependency\navailable to your rule by specifying it in an ",(0,a.mdx)("inlineCode",{parentName:"p"},"exported_deps")," argument in the\nrule of the explicitly-specified dependency."),(0,a.mdx)("h2",{id:"buck-uses-dependency-files-to-trim-over-specified-inputs"},"Buck uses dependency files to trim over-specified inputs"),(0,a.mdx)("p",null,"Buck's low-level build rules specify all inputs\u2014such as source files or the\noutputs from other build rules\u2014that might contribute to the output when the\nbuild rule is executed. Normally, changes to any of these inputs result in a new\nRuleKey and therefore trigger a rebuild. However, in practice, it's not uncommon\nfor these build rules to ",(0,a.mdx)("em",{parentName:"p"},"over-specify")," their inputs. A good example is Buck's\nC/C++ compilation rules. C/C++ compilation rules specify as inputs all headers\nfound from the transitive closure of C/C++ library dependencies, even though in\nmany cases only a small subset of these headers are actually used. For example,\na C/C++ source file might use only one of many headers exported by a C/C++\nlibrary dependency. However, there's not enough information available before\nrunning the build to know if any given input is used, and so all inputs must be\nconsidered, which can lead to unnecessary rebuilding. In some cases, after the\nbuild completes, Buck can figure out the exact subset of the listed inputs that\nwere actually used. In C/C++, compilers such as ",(0,a.mdx)("inlineCode",{parentName:"p"},"gcc")," provide a ",(0,a.mdx)("inlineCode",{parentName:"p"},"-M")," option\nwhich produces a dependency file. This file identifies the exact headers that\nwere used during compilation. For supported rules, Buck uses this dependency\nfile before the build, to try to avoid an unnecessary rebuilding:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"If the dependency file is available before the build, Buck reads the file and\nuses it to filter out unused inputs when constructing the RuleKey."),(0,a.mdx)("li",{parentName:"ul"},"If no dependency file is available before the build, Buck runs the build as\nnormal and produces a dependency file. The dependency file is then available\nfor subsequent builds.")),(0,a.mdx)("p",null,"Note that dependency files are used only if the standard RuleKey\u2014which considers\nall inputs\u2014doesn't match. In cases where the RuleKey matches, the output from\nthe rule can be fetched from the cache."))}c.isMDXComponent=!0}}]);